This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
css/
  accordion-style.css
  layout-fix.css
  menu-styles.css
  responsive.css
  styles.css
js/
  config.js
  dynamic-services.js
  i18n.js
  main.js
  menu-formatter.js
  navigation.js
  scroll-monitor.js
  star-rating.js
  validation.js
locales/
  en/
    translation.json
  ja/
    translation.json
  zh/
    translation.json
.gitignore
index.html
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="js/dynamic-services.js">
/**
 * 動的サービスメニュー制御
 * 選択された店舗に基づいて施術メニューを切り替えます
 * 
 * このファイルは店舗選択ラジオボタンの変更を監視し、
 * iL店舗が選択された場合にのみ特別なメニュー選択肢を表示します。
 */

// DOM読み込み完了後に初期化
document.addEventListener('DOMContentLoaded', function() {
  initDynamicServices();
});

/**
 * 動的サービスメニュー切り替え機能の初期化
 */
function initDynamicServices() {
  console.log('動的サービスメニュー機能を初期化');
  
  // 店舗選択ラジオボタンに変更イベントリスナーを設定
  const storeRadios = document.querySelectorAll('input[name="store"]');
  
  storeRadios.forEach(radio => {
    radio.addEventListener('change', function() {
      console.log('店舗選択変更: ' + this.value);
      updateServiceOptions();
    });
  });
  
  // 初期状態のチェック（ページ読み込み時や戻る操作など、既に選択がある場合に対応）
  updateServiceOptions();
}

/**
 * 選択された店舗に応じてサービスメニューを更新
 */
function updateServiceOptions() {
  // 選択されている店舗を取得
  const selectedStore = document.querySelector('input[name="store"]:checked');
  
  // サービスメニューのコンテナ
  const standardServices = document.getElementById('standard-services');
  const ilServices = document.getElementById('il-services');
  
  if (!standardServices || !ilServices) {
    console.warn('サービスメニューコンテナが見つかりません');
    return;
  }
  
  // 選択に応じて表示を切り替え
  if (selectedStore && selectedStore.value === 'iL') {
    // iLが選択された場合
    console.log('iL用メニューを表示');
    standardServices.style.display = 'none';
    ilServices.style.display = 'block';
    
    // 標準メニューのチェックを解除
    uncheckAll(standardServices);
  } else {
    // iL以外が選択された場合または未選択の場合
    console.log('標準メニューを表示');
    standardServices.style.display = 'block';
    ilServices.style.display = 'none';
    
    // iLメニューのチェックを解除
    uncheckAll(ilServices);
  }
}

/**
 * 指定されたコンテナ内のすべてのチェックボックスのチェックを解除
 * メニュー切替時に選択状態をクリアするため
 * 
 * @param {HTMLElement} container - チェックボックスを含むコンテナ要素
 */
function uncheckAll(container) {
  if (!container) return;
  
  const checkboxes = container.querySelectorAll('input[type="checkbox"]');
  checkboxes.forEach(checkbox => {
    checkbox.checked = false;
  });
}

// グローバルスコープに公開
window.initDynamicServices = initDynamicServices;
</file>

<file path="js/navigation.js">
/**
 * QUARTERアンケート - デスクトップ対応ナビゲーション機能
 * 
 * このファイルはアンケートフォーム内の異なるセクション間を移動するための
 * ナビゲーション機能を提供します。デスクトップとモバイルデバイスの両方に対応するよう設計されています。
 */

// 即時実行関数式（IIFE）- 外部スコープを汚染せずに変数や関数をカプセル化します
// この関数はコードが読み込まれるとすぐに自動的に実行されます
(function() {
  // イベントリスナー設定（モバイルとデスクトップ両方に対応）
  // document.readyStateが'loading'の場合はまだDOMの読み込みが完了していないので
  // DOMContentLoadedイベントを待ってから初期化関数を実行します
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCrossPlatformNavigation);
  } else {
    // すでにDOMの読み込みが完了している場合は直ちに初期化関数を実行します
    initCrossPlatformNavigation();
  }
  
  /**
   * クロスプラットフォームナビゲーションを初期化する関数
   * デスクトップとモバイル両方に対応したナビゲーション機能をセットアップします
   */
  function initCrossPlatformNavigation() {
    console.log('クロスプラットフォームナビゲーション初期化');
    
    // 通常のクリックイベントとタッチイベントの両方を設定
    // querySelectorAllでクラス名'nav-item'を持つすべての要素を取得し、それぞれに対して処理を実行
    document.querySelectorAll('.nav-item').forEach(navItem => {
      // デスクトップ用（クリック）- マウスでのクリックイベントに対応
      navItem.addEventListener('click', handleNavigation);
      
      // モバイル用（タッチ）- スマートフォンやタブレットのタッチイベントに対応
      // touchendはタッチが終了した時点（指が画面から離れた時）に発火します
      navItem.addEventListener('touchend', handleNavigation);
    });
    
    /**
     * ナビゲーションイベントを処理する関数
     * ナビゲーションアイテムがクリックまたはタップされた時に呼び出されます
     * 
     * @param {Event} e - イベントオブジェクト（クリックまたはタッチイベント）
     */
    function handleNavigation(e) {
      // イベントの標準動作を防止（リンクのクリックなど）
      e.preventDefault();
      // イベントの親要素への伝播（バブリング）を停止
      if (e.stopPropagation) e.stopPropagation();
      
      // thisはイベントが発生した要素（navItem）を参照します
      const navItem = this;
      // data-section属性から対象のセクション名を取得
      const section = navItem.getAttribute('data-section');
      console.log('ナビゲーションイベント:', e.type, section);
      
      // デスクトップに特化したターゲット要素の検索
      // スクロール先になる対象要素を探します
      let targetElement = null;
      
      // 方法1: data-section属性で検索
      // 例：<div class="question" data-section="store">...</div>
      targetElement = document.querySelector(`.question[data-section="${section}"]`);
      
      // 方法2: セクションの名前に基づいた検索（フォールバック）
      // 方法1で見つからなかった場合、IDで検索します
      // 例：<div id="question-store">...</div>
      if (!targetElement) {
        targetElement = document.querySelector(`#question-${section}`);
      }
      
      // 方法3: クラス名でのフォールバック
      // 方法1と2で見つからなかった場合、クラス名で検索します
      // 例：<div class="store-section">...</div>
      if (!targetElement) {
        targetElement = document.querySelector(`.${section}-section`);
      }
      
      // 対象要素が見つかった場合の処理
      if (targetElement) {
        // アクティブ状態の更新
        // すべてのナビアイテムからactiveクラスを削除
        document.querySelectorAll('.nav-item').forEach(item => {
          item.classList.remove('active');
        });
        // クリックされたナビアイテムにactiveクラスを追加
        navItem.classList.add('active');
        
        // デスクトップ用の強化されたスクロール処理
        // 対象要素の上端から画面上端までの距離（ビューポート内での位置）を取得
        const targetPosition = targetElement.getBoundingClientRect().top;
        // 現在のスクロール位置を考慮して、絶対的な位置を計算
        // 80pxは上部のナビゲーションバーなどの高さを考慮したオフセット
        const offsetPosition = targetPosition + window.pageYOffset - 80;
        
        // 複数のスクロール方法を試行
        // 異なるブラウザの互換性に対応するため複数の方法を実装
        try {
          // 1. スムーズスクロール API（最新ブラウザ）
          // 最新のブラウザはこの方法でスムーズにスクロールできます
          window.scrollTo({
            top: offsetPosition,    // スクロール先の縦位置
            behavior: 'smooth'      // スムーズにアニメーションさせる
          });
          
          // 2. jQuery風のアニメーション（互換性のため）
          // スムーズスクロールAPIに対応していない古いブラウザ向けの代替手段
          setTimeout(function() {
            // 現在のスクロール位置を取得
            const startPosition = window.pageYOffset;
            // 移動する距離を計算
            const distance = offsetPosition - startPosition;
            // アニメーション時間（ミリ秒）
            const duration = 500;
            // アニメーション開始時間（初期値はnull）
            let start = null;
            
            /**
             * アニメーションの各フレームを処理する関数
             * requestAnimationFrameによって呼び出されます
             * 
             * @param {DOMHighResTimeStamp} timestamp - 現在のフレームのタイムスタンプ
             */
            function step(timestamp) {
              // 最初のフレームでアニメーション開始時間を記録
              if (!start) start = timestamp;
              // アニメーション開始からの経過時間を計算
              const progress = timestamp - start;
              // 進捗率を0～1の範囲で計算（1を超えないようにする）
              const percent = Math.min(progress / duration, 1);
              // イージング関数：始まりと終わりがゆっくりで、途中が速い動き
              // これによりより自然なアニメーションになります
              const easing = percent < 0.5 ? 2 * percent * percent : -1 + (4 - 2 * percent) * percent;
              
              // 計算した位置にスクロール
              window.scrollTo(0, startPosition + distance * easing);
              
              // アニメーション時間内なら次のフレームをリクエスト
              if (progress < duration) {
                window.requestAnimationFrame(step);
              }
            }
            
            // アニメーションの最初のフレームをリクエスト
            window.requestAnimationFrame(step);
          }, 10); // 10ミリ秒後に実行（少しの遅延を入れて前のスクロール処理と競合を避ける）
          
          // 3. フォールバック：即時スクロール
          // 上記の方法が両方とも失敗した場合、または思った通りに動かない場合のための措置
          setTimeout(function() {
            // 現在位置と目標位置の差が100px以上ある場合のみ実行
            // （これによりアニメーションが正常に動作している場合は邪魔をしない）
            if (Math.abs(window.pageYOffset - offsetPosition) > 100) {
              // 即座に目標位置にジャンプ
              window.scrollTo(0, offsetPosition);
            }
          }, 600); // 600ミリ秒後に実行（アニメーションが完了したはずの時間）
        } catch (error) {
          // どのスクロール方法も失敗した場合のエラーハンドリング
          console.error('スクロールエラー:', error);
          // 最終手段：直接スクロール（アニメーションなし）
          window.scrollTo(0, offsetPosition);
        }
        
        console.log('スクロール実行:', offsetPosition);
      } else {
        // 対象セクションが見つからなかった場合のエラーメッセージ
        console.error('対象セクションが見つかりません:', section);
        // デバッグ情報：現在ページ上に存在するすべてのdata-section属性値を表示
        console.log('利用可能なセクション:',
          Array.from(document.querySelectorAll('[data-section]'))
            .map(el => el.getAttribute('data-section'))
        );
      }
      
      return false; // イベント伝播を停止（さらなる安全対策）
    }
  }
  
  // グローバルスコープに公開
  // 他のJavaScriptファイルからもこの関数を呼び出せるようにするため
  // window（グローバルオブジェクト）のプロパティとして関数を追加
  window.initCrossPlatformNavigation = initCrossPlatformNavigation;
})(); // 即時実行関数の終了と実行
</file>

<file path="js/scroll-monitor.js">
/**
 * QUARTERアンケート - スクロール位置監視機能
 * 
 * このファイルはユーザーのスクロール位置を監視し、現在表示されているセクションに
 * 基づいてナビゲーションメニューの表示を自動的に更新する機能を提供します。
 * これにより、ユーザーがスクロールしているときに、どのセクションを見ているのかが
 * ナビゲーションメニューに反映され、使いやすさが向上します。
 */

// 即時実行関数式（IIFE）- このファイルのコードをカプセル化し、グローバルスコープを汚染しないようにします
(function() {
  // ページ読み込み完了時に初期化
  // document.readyStateで現在のDOMの読み込み状態を確認します
  if (document.readyState === 'loading') {
    // まだDOM読み込み中の場合は、読み込み完了イベントを待ちます
    document.addEventListener('DOMContentLoaded', initScrollMonitor);
  } else {
    // すでに読み込まれている場合は直接実行
    // （遅いタイミングでこのスクリプトが実行された場合の対応）
    initScrollMonitor();
  }
  
  /**
   * スクロール位置監視機能の初期化
   * ページ内のセクションを特定し、スクロールイベントのリスナーを設定します
   */
  function initScrollMonitor() {
    console.log('スクロール位置監視機能の初期化');
    
    // 監視対象のセクションを特定
    // data-section属性を使って、各種類のセクションに属する要素をすべて収集します
    const sections = {
      store: document.querySelectorAll('[data-section="store"]'),    // 店舗選択セクション
      rating: document.querySelectorAll('[data-section="rating"]'),  // 評価セクション
      info: document.querySelectorAll('[data-section="info"]'),      // 情報入力セクション
      service: document.querySelectorAll('[data-section="service"]'), // サービス評価セクション
      feedback: document.querySelectorAll('[data-section="feedback"]') // 感想セクション
    };
    
    // スクロールイベントのスロットリング（パフォーマンス対策）
    // スクロールイベントは非常に頻繁に発生するため、処理を間引く必要があります
    let isScrolling = false; // 現在処理中かどうかを示すフラグ
    
    // windowのスクロールイベントにリスナーを設定
    window.addEventListener('scroll', function() {
      // 処理中でなければ実行
      if (!isScrolling) {
        isScrolling = true; // 処理中フラグをオン
        
        // 少し遅らせて処理（パフォーマンス向上）
        // setTimeoutを使うことで、連続したスクロールイベントをまとめて1回の処理にします
        setTimeout(function() {
          updateActiveNavItem(); // ナビゲーションアイテムの更新処理を実行
          isScrolling = false;   // 処理中フラグをオフに戻す
        }, 100); // 100ミリ秒（0.1秒）の遅延
      }
    });
    
    // 初期状態の更新（ページ読み込み時）
    // ページ読み込み直後にもナビゲーションの状態を更新するために遅延実行
    setTimeout(updateActiveNavItem, 500); // 500ミリ秒（0.5秒）後に実行
    
    /**
     * スクロール位置に基づいてアクティブなナビゲーション項目を更新
     * 現在最も画面に表示されているセクションを計算し、対応するナビアイテムをハイライトします
     */
    function updateActiveNavItem() {
      // ビューポート（画面表示領域）の高さを取得
      const viewportHeight = window.innerHeight;
      // 現在のスクロール位置を取得（ブラウザ互換性のため複数の方法を試みる）
      const scrollTop = window.scrollY || document.documentElement.scrollTop;
      
      // 最も表示されているセクションを追跡する変数
      let mostVisibleSection = ''; // 最も可視性の高いセクション名
      let maxVisibility = 0;      // 最大の可視性値（0〜1の範囲）
      
      // 各セクションの可視性をチェック
      for (const section in sections) {
        const elements = sections[section]; // セクションに属する要素のリスト
        if (elements.length === 0) continue; // 要素がない場合はスキップ
        
        let sectionVisibility = 0; // このセクションの合計可視性
        
        // セクション内の各要素の可視性を計算
        elements.forEach(element => {
          // 要素の位置と大きさの情報を取得
          const rect = element.getBoundingClientRect();
          
          // 画面内に表示されている要素のみを考慮
          // rect.topが画面高さ未満かつrect.bottomが0より大きい場合、要素の一部が画面内に表示されています
          if (rect.top < viewportHeight && rect.bottom > 0) {
            // 要素の可視部分の高さを計算
            // 画面内に表示されている部分だけを考慮します
            const visibleHeight = Math.min(rect.bottom, viewportHeight) - Math.max(rect.top, 0);
            // 要素の可視率を計算（0〜1）
            // 要素全体に対して、どれだけの割合が表示されているかを計算
            const elementVisibility = visibleHeight / rect.height;
            // セクション全体の可視性に加算
            sectionVisibility += elementVisibility;
          }
        });
        
        // 最も可視性の高いセクションを特定
        if (sectionVisibility > maxVisibility) {
          maxVisibility = sectionVisibility;
          mostVisibleSection = section;
        }
      }
      
      // デバッグ用ログ出力
      console.log('現在のセクション:', mostVisibleSection, '(可視性:', maxVisibility.toFixed(2), ')');
      
      // 対応するナビゲーション項目をアクティブ化
      if (mostVisibleSection) { // 可視セクションが見つかった場合
        // すべてのナビゲーションアイテムを取得
        const navItems = document.querySelectorAll('.nav-item');
        
        // 各ナビアイテムに対して処理
        navItems.forEach(item => {
          // ナビアイテムのdata-section属性を取得
          const itemSection = item.getAttribute('data-section');
          // 最も可視性の高いセクションと一致するかどうかチェック
          if (itemSection === mostVisibleSection) {
            // すでにactiveクラスが付いていない場合のみログを出力（状態変化の追跡）
            if (!item.classList.contains('active')) {
              console.log('ナビアイテム切り替え:', itemSection);
            }
            // アクティブクラスを追加
            item.classList.add('active');
          } else {
            // 一致しない場合はactiveクラスを削除
            item.classList.remove('active');
          }
        });
      }
    }
  }
})(); // 即時実行関数の終了と実行
</file>

<file path="js/star-rating.js">
/**
 * 星評価UI管理
 * 星による評価システムの動作を制御します
 * 
 * このファイルは星評価のインタラクティブな機能を実装し、
 * ユーザーが視覚的に星をクリック・タップして評価を選択できるようにします。
 * マウスオーバー効果や選択状態の視覚化、エラー表示なども管理します。
 */

// DOM読み込み完了後に初期化
// HTML要素が完全に読み込まれた後に星評価の機能を初期化します
document.addEventListener('DOMContentLoaded', function() {
  initStarRating();
});

/**
 * 星評価機能の初期化
 * すべての星評価関連の要素を設定し、イベントリスナーを追加します
 */
function initStarRating() {
  // DOM要素の取得
  // 必要なすべての要素を一度に取得して後で使えるようにします
  const stars = document.querySelectorAll('.star');               // すべての星要素
  const ratingScore = document.getElementById('ratingScore');      // 評価スコア表示用コンテナ
  const scoreValue = document.getElementById('scoreValue');        // 数値としての評価値表示
  const lowRatingWarning = document.getElementById('lowRatingWarning'); // 低評価警告メッセージ
  const question2 = document.getElementById('question2');          // 評価質問のコンテナ
  const ratingValidation = document.getElementById('rating-validation'); // 評価のバリデーションメッセージ
  const globalValidation = document.getElementById('global-validation'); // グローバルバリデーションメッセージ
  
  // 状態変数
  // 現在選択されている評価値（1-5、初期値は0で未選択）
  let selectedRating = 0;
  
  // 初期設定
  // 低評価警告は初期状態では非表示
  if (lowRatingWarning) {
    lowRatingWarning.style.display = 'none';
  }
  
  // 星にマウスオーバーイベントを設定
  // マウスが星の上に乗ったときのプレビュー効果
  stars.forEach(star => {
    star.addEventListener('mouseover', () => {
      // data-value属性から星の値（1-5）を取得
      const value = parseInt(star.getAttribute('data-value'));
      // その値までの星をハイライト表示
      highlightStars(value);
    });
  });
  
  // マウスアウト時に選択中の評価に戻す
  // マウスが星の領域から離れたとき、選択中の評価に表示を戻します
  const starsContainer = document.getElementById('starsContainer');
  if (starsContainer) {
    starsContainer.addEventListener('mouseout', () => {
      // 現在選択されている評価値に戻す
      highlightStars(selectedRating);
    });
  }
  
  // 星のクリックイベント
  // ユーザーが星をクリックして評価を選択したときの処理
  stars.forEach(star => {
    star.addEventListener('click', () => {
      // クリックされた星の値を取得
      const value = parseInt(star.getAttribute('data-value'));
      // その値で評価を設定
      selectRating(value);
      
      // アニメーション効果
      // クリック時に星を一瞬大きくする「パルス」アニメーション
      star.classList.add('pulse');
      // 300ミリ秒後にアニメーションクラスを削除（アニメーション完了後）
      setTimeout(() => {
        star.classList.remove('pulse');
      }, 300);
    });
    
    // タッチデバイス対応
    // スマートフォンやタブレットなどのタッチデバイス向けの処理
    star.addEventListener('touchend', e => {
      // タッチイベントのデフォルト動作（タップ後のクリックイベント等）を防止
      e.preventDefault();
      // タップされた星の値を取得
      const value = parseInt(star.getAttribute('data-value'));
      // その値で評価を設定
      selectRating(value);
    });
  });
  
  /**
   * 指定された数まで星をハイライト表示
   * 星の見た目を更新する内部ヘルパー関数
   * 
   * @param {number} count - ハイライトする星の数（1-5）
   */
  function highlightStars(count) {
    // すべての星に対して処理
    stars.forEach(star => {
      // 各星の値を取得
      const starValue = parseInt(star.getAttribute('data-value'));
      // 指定された数以下の値を持つ星には「active」クラスを追加
      if (starValue <= count) {
        star.classList.add('active');
      } else {
        // それ以外の星からは「active」クラスを削除
        star.classList.remove('active');
      }
    });
  }
  
  /**
   * 低評価警告の表示
   * 低い評価（1-2）が選択された際に注意を促す警告を表示します
   */
  function showLowRatingWarning() {
    // 警告要素が存在しない場合は処理を中断
    if (!lowRatingWarning) return;
    
    // 警告を表示するためのクラスを追加
    lowRatingWarning.classList.add('visible');
    // 3秒（3000ミリ秒）後に警告を非表示にする
    setTimeout(() => {
      lowRatingWarning.classList.remove('visible');
    }, 3000);
  }
  
  /**
   * 評価を選択・設定
   * ユーザーが選択した評価値を保存し、UI全体を更新します
   * 
   * @param {number} value - 選択された評価値（1-5）
   */
  function selectRating(value) {
    // 選択された評価値を状態変数に保存
    selectedRating = value;
    // 星の表示を更新
    highlightStars(value);
    
    // 対応するラジオボタンをチェック
    // 見えない（隠れた）ラジオボタンをフォーム送信用に設定
    const radioBtn = document.getElementById('star' + value);
    if (radioBtn) radioBtn.checked = true;
    
    // UI更新
    // 数値表示を更新
    if (scoreValue) scoreValue.textContent = value;
    // 評価スコア表示を可視化
    if (ratingScore) ratingScore.classList.add('visible');
    // 低評価警告を非表示に
    if (lowRatingWarning) lowRatingWarning.classList.remove('visible');
    // 質問を完了状態に
    if (question2) question2.classList.add('completed');
    
    // エラー状態の解除
    // 評価が選択されたのでエラー表示をクリア
    if (question2) question2.classList.remove('error');
    if (ratingValidation) ratingValidation.classList.remove('visible');
    if (globalValidation) globalValidation.classList.remove('visible');
  }
}

// グローバルスコープに公開
// 他のJSファイルからもこの関数を呼び出せるようにする
window.initStarRating = initStarRating;
</file>

<file path="css/menu-styles.css">
/* ============================================
   QUARTERアンケート - 構造化メニュースタイル
   JavaScriptで分離されたメニュー項目のスタイル定義
   ============================================ */

/* ----------------------------------------
   構造化メニュー項目のスタイル
   ---------------------------------------- */

/* メニュータイトルのスタイル */
.menu-title {
  display: block;
  font-weight: 500;
  color: var(--text-color);
  font-size: 15px;
  margin-bottom: 4px;
  letter-spacing: 0.5px;
}

/* メニュー説明のスタイル */
.menu-description {
  display: block;
  font-size: 13px;
  color: var(--gray-700);
  line-height: 1.4;
  letter-spacing: 0;
}

/* 選択状態のスタイル強化 */
.options input[type="radio"]:checked + label .menu-title,
.options input[type="checkbox"]:checked + label .menu-title {
  color: var(--primary-color);
}

/* ホバー時のスタイル */
.options label:hover .menu-title {
  color: var(--primary-color);
}

/* アコーディオン内のメニュースタイル微調整 */
.collapsible-group .options label .menu-title {
  font-size: 14px;
}

.collapsible-group .options label .menu-description {
  font-size: 12px;
}

/* ----------------------------------------
   モバイル対応
   ---------------------------------------- */
@media (max-width: 480px) {
  .menu-title {
    font-size: 14px;
  }
  
  .menu-description {
    font-size: 12px;
  }
  
  .collapsible-group .options label .menu-title {
    font-size: 13px;
  }
  
  .collapsible-group .options label .menu-description {
    font-size: 11px;
  }
}
</file>

<file path="js/config.js">
/**
 * QUARTERアンケート - 設定ファイル
 * アプリケーション全体で使用される定数と設定
 * 
 * このファイルは「設定」のみを含み、ロジック（処理）は含みません。
 * 設定を一カ所にまとめることで、後から変更が必要になった場合に修正しやすくなります。
 */

// グローバル変数としてCONFIGを定義
// window.CONFIGとすることで、他のJavaScriptファイルからもアクセスできるようになります
// （windowはブラウザのグローバルオブジェクトで、ブラウザ上で動くすべてのJSから参照できます）
window.CONFIG = {
  // Apps Script WebアプリのURL
  // このURLはGoogleフォームやスプレッドシートと連携するためのエンドポイントです
  // アンケートの回答データはこのURLに送信され、Googleスプレッドシートに保存されます
  // 注意: このURLは定期的に変更される可能性があります（Googleのセキュリティポリシーにより）
  APPS_SCRIPT_WEBAPP_URL: 'https://script.google.com/macros/s/AKfycbxA-xuRc_F0Ih1KE9r9YXfOJ5WJqF0vUZvm3Eb_aQ9coqBjJzoA3nNoRuxNmajK06Xceg/exec',
  
  // 各店舗のGoogleマップレビューURL
  // オブジェクト（連想配列）形式で、店舗名をキーに、そのレビューページURLを値として保存しています
  // 高評価（星4以上）を選択したユーザーを、対応する店舗のGoogleマップレビューページに誘導するために使用します
  STORE_REVIEW_URLS: {
    // QUARTERブランドの店舗
    'QUARTER': 'https://g.page/r/CfiWzYV0WLCdEBE/review',         // QUARTERメイン店
    'QUARTER RESORT': 'https://g.page/r/CUpu9_cAhdaGEBE/review',   // QUARTERリゾート店
    'QUARTER SEASONS': 'https://g.page/r/CWAu_dLl0DJmEBE/review',  // QUARTER SEASONS店
    'LINK': 'https://g.page/r/CYLblbqgWXsREBE/review',            // LINK店
    'iL': 'https://g.page/r/CemPjkInZSpLEBE/review'               // iL店
  }
};

// エクスポート（必要に応じて）
// この部分は、Node.js環境（サーバーサイド）でこのファイルが読み込まれた場合に、
// CONFIGオブジェクトをエクスポートするためのコードです。
// ブラウザ環境では実行されず、Node.js環境でのみ実行されます。
// これにより同じ設定ファイルをフロントエンド（ブラウザ）とバックエンド（サーバー）の両方で使える「ユニバーサル」な設定にしています。
if (typeof module !== 'undefined' && module.exports) {
  // module変数が存在し、exportsプロパティがある場合（=Node.js環境の場合）
  module.exports = CONFIG;  // CONFIGオブジェクトをエクスポート
}
</file>

<file path="README.md">
# **QUARTER アンケート要件定義書（実装反映版）**

## **1. プロジェクト概要**

**プロジェクト名**: 「QUARTERアンケートWebアプリ構築」  
**実施目的**:
* 来店客に短時間で回答してもらい、施術やサービスへのフィードバックを集める
* 星4以上（高評価）の場合はGoogleマップの口コミ投稿を促し、オンライン評価を向上させる
* スタッフがシンプルに案内できる運用フローを構築し、回答数を増やす
* QUARTER様の「落ち着いた高級感・白を基調とした世界観」を損なわない、おしゃれなフォームデザインを実現する

## **2. サロンのブランド・コンセプト**

**運営：Studio25グループ（1948年創業）、文京区を中心に5店舗展開**

1. QUARTER  
2. QUARTER RESORT  
3. QUARTER SEASONS  
4. LINK  
5. iL

**経営理念**:
「技術を磨き続けることで、地域のお客様の美に貢献し、豊かで誇りある人生を歩む。」

**コンセプト**:
* 落ち着いた雰囲気の高級志向サロン
* 店内は洗練されたデザインでリラックスできる空間
* 幅広い年齢層（20代～70代）のお客様が来店
* ヘアだけでなくネイルや着付けなどトータルビューティーも提供

## **3. 実装済みUI/UXの特徴**

### **3.1 デザイン・カラースキーム**

* **基本カラー**:
  * プライマリカラー: `#C39000`（リッチゴールド）
  * セカンダリカラー: `#9F8C55`（マットゴールド）
  * アクセントカラー: `#D0A900`（ゴールド）
  * 背景色: `#F9F6F0`（淡いベージュ）
  * テキスト色: `#333333`
  * ボーダー色: `#E6D8B3`（シャンパンベージュ）

* **フォント**:
  * 見出し: 'Playfair Display', serif
  * 本文: 'Noto Sans JP', sans-serif

* **全体的なデザイン**:
  * 白を基調としたミニマルで上品なデザイン
  * 角を四角に統一（border-radius: 0px）
  * 要素間の余白を一貫して調整
  * ゴールドのアクセントで高級感を表現

### **3.2 ナビゲーション**

* 画面上部に固定されたタブ形式のナビゲーション
* 5つのセクションに分類:
  1. 店舗
  2. 評価
  3. 情報
  4. サービス
  5. 感想
* アクティブなセクションはゴールドの下線でハイライト
* スクロールに応じて自動的にアクティブタブが切り替わる
* タブをタップするとそのセクションへスムーズにスクロール

### **3.3 フォーム要素のデザイン**

* **質問カード**:
  * 白背景で影付き
  * 現在の質問は左側にゴールドのボーダー
  * 回答済み質問は左側にマットゴールドのボーダー

* **選択肢のインタラクション**:
  * ホバー/タップ時に背景色変化
  * 選択時に左側ボーダーがゴールドに変化
  * 選択時にチェックマーク（✓）表示

* **星評価**:
  * 大きく見やすい星マークUI
  * 選択した評価に応じた星の色づけ
  * 評価選択時のアニメーション効果
  * 低評価（1-2星）時の確認メッセージ

* **送信ボタン**:
  * ゴールドのグラデーション背景
  * ホバー時の拡大と影の強調
  * クリック時のフィードバック

## **4. アンケート項目と構成**

### **4.1 必須項目**

1. **ご来店店舗** (Q1)
   * QUARTER
   * QUARTER RESORT
   * QUARTER SEASONS
   * LINK
   * iL

2. **総合評価（星1～5）** (Q2)
   * ★★★★★ (5)
   * ★★★★☆ (4)
   * ★★★☆☆ (3)
   * ★★☆☆☆ (2)
   * ★☆☆☆☆ (1)

### **4.2 任意項目**

3. **お名前（ニックネーム可）** (Q3)
   * テキスト入力

4. **新規 or 常連** (Q4)
   * 初めて（新規）
   * 2回目以降（常連）

5. **性別** (Q5)
   * 男性
   * 女性
   * その他

6. **年齢** (Q6)
   * 10代
   * 20代
   * 30代
   * 40代
   * 50代
   * 60代以上

7. **ご利用いただいたサービス（複数選択可）** (Q7)
   * カット
   * カラー
   * パーマ
   * トリートメント
   * スタイリング
   * その他（ネイル・着付け 等）

8. **技術や仕上がりに対する満足度** (Q8)
   * 非常に満足
   * 満足
   * 普通
   * 不満
   * 非常に不満

9. **スタッフの対応** (Q9)
   * 非常に良い
   * 良い
   * 普通
   * 悪い
   * 非常に悪い

10. **待ち時間** (Q10)
    * 非常に満足
    * 満足
    * 普通
    * 不満
    * 非常に不満

11. **店内の清潔感** (Q11)
    * 非常に清潔
    * 清潔
    * 普通
    * 不清潔
    * 非常に不清潔

12. **追加してほしいサービスや改善点など** (Q12)
    * テキストエリア入力

13. **その他ご感想** (Q13)
    * テキストエリア入力

## **5. バリデーションと入力支援**

### **5.1 必須項目のバリデーション**

* 店舗選択と星評価が必須
* 送信時に必須項目が未入力の場合:
  * 該当質問の左ボーダーをアクセントカラーに変更
  * 質問の下に専用のエラーメッセージを表示
  * 最初のエラー項目へ自動スクロール
  * 該当項目を一時的にハイライト表示

### **5.2 質問への回答時のフィードバック**

* 選択肢選択時またはテキスト入力時に質問カードに「回答済み」マークを表示
* 星評価選択時に数値表示とアニメーションでフィードバック
* エラー状態は回答入力で自動解除

## **6. 送信後のフロー**

### **6.1 低評価（星3以下）の場合**

* シンプルなお礼メッセージを表示:
  > ご回答ありがとうございました。
  > 貴重なご意見を参考に、より良いサービスを目指します。

### **6.2 高評価（星4以上）の場合**

* 口コミ促進画面を表示
* 星評価に応じたメッセージ表示:
  * 星5: 「星5ありがとうございます！」
  * 星4: 「星4ありがとうございます！」
* 自由記述欄（Q12・Q13）の内容を口コミ用にコピーできる機能
* ワンクリックでGoogleマップ口コミページへ誘導

### **6.3 口コミ促進の文言**

```
星[4/5]ありがとうございます！
いつも当店をご利用いただき、誠にありがとうございます。
もしよろしければ、以下のコメントをコピーして「Googleマップ」にご投稿いただけますと大変励みになります。

- ボタンを押すと簡単にコピーできます
- 投稿ページが開いたらペーストしていただくだけでOKです

今後とも皆様に喜んでいただけるよう、スタッフ一同さらに技術を磨いてまいります。
どうぞよろしくお願いいたします。
```

## **7. Googleマップの口コミURL**

店舗に応じて以下のURLへ誘導:

* **QUARTER**:  
  `https://g.page/r/CfiWzYV0WLCdEBE/review`
* **QUARTER RESORT**:  
  `https://g.page/r/CUpu9_cAhdaGEBE/review`
* **QUARTER SEASONS**:  
  `https://g.page/r/CWAu_dLl0DJmEBE/review`
* **LINK**:  
  `https://g.page/r/CYLblbqgWXsREBE/review`
* **iL**:  
  `https://g.page/r/CemPjkInZSpLEBE/review`

## **8. 技術的な実装詳細**

### **8.1 構成**

* **フロントエンド**: HTML, CSS, JavaScript
* **バックエンド**: Google Apps Script (GAS)
* **データ保存**: Google スプレッドシート

### **8.2 機能実装**

* クライアントサイドのフォームバリデーション
* セクション間のスムーズなナビゲーション
* レスポンシブデザイン（モバイルファースト）
* クリップボード操作（コメントコピー機能）
* 動的なUIフィードバック（アニメーション、状態変化）
* 動的なサービス選択機能
* GASと連携したデータ送信

### **8.3 設定**

* グローバル変数として`CONFIG`オブジェクトを定義
* GoogleマップURLと必要な設定を一元管理
* Apps ScriptのWebアプリURLを設定

```javascript
window.CONFIG = {
  APPS_SCRIPT_WEBAPP_URL: 'https://script.google.com/macros/s/AKfycbxA-xuRc_F0Ih1KE9r9YXfOJ5WJqF0vUZvm3Eb_aQ9coqBjJzoA3nNoRuxNmajK06Xceg/exec',
  STORE_REVIEW_URLS: {
    'QUARTER': 'https://g.page/r/CfiWzYV0WLCdEBE/review',
    'QUARTER RESORT': 'https://g.page/r/CUpu9_cAhdaGEBE/review',
    'QUARTER SEASONS': 'https://g.page/r/CWAu_dLl0DJmEBE/review',
    'LINK': 'https://g.page/r/CYLblbqgWXsREBE/review',
    'iL': 'https://g.page/r/CemPjkInZSpLEBE/review'
  }
};
```

### **8.4 プロジェクトフォルダ構造**

```
│
├── index.html                     // HTMLメインファイル
├── README.md                      // プロジェクト説明書
├── css/
│   ├── styles.css                 // メインスタイル
│   └── responsive.css             // レスポンシブデザイン用
├── js/
│   ├── config.js                  // 設定ファイル
│   ├── dynamic-services.js        // 動的サービス機能
│   ├── main.js                    // メインのJavaScript
│   ├── navigation.js              // ナビゲーション機能
│   ├── validation.js              // フォームのバリデーション
│   ├── star-rating.js             // 星評価機能
│   └── scroll-monitor.js          // スクロール監視機能
└── images/
    └── quarter-logo.png           // ロゴ画像
```

## **9. 運用ルール・フロー**

1. **スタッフによる案内**  
   * カウンターにPOPを設置、またはセット面にQRシールを貼る  
   * 施術後に「もしお時間ございましたら、こちらから簡単なアンケートにご協力いただけると嬉しいです」とご案内  
   * 必要に応じてスタッフ用タブレットを手渡し、入力をサポート  

2. **回答後のトラブル対応**  
   * 口コミ投稿画面で迷った際などはスタッフがフォロー  
   * 必要に応じて「LINEでURLをお送りしますので後ほど…」と案内  

3. **定期的な改善サイクル**  
   * 月次ミーティングで「回答一覧」シートを確認し、星3以下の要望やコメントを共有 → サービス改善策を検討  
   * 口コミ投稿数や平均星評価もGoogleマップ上で定期チェック

## **10. まとめ**

* シンプルで上品なUI/UXを実現し、QUARTERブランドイメージに沿ったデザイン
* 必須項目は「店舗選択」「星評価」のみに絞り、短時間で回答可能
* 星4以上の高評価の場合は口コミ投稿を促進する仕組み
* 各店舗ごとに最適なGoogleマップリンクへ誘導
* スプレッドシートとの連携によるデータ収集と分析
* モバイルファーストのレスポンシブデザインで幅広い端末に対応


# **QUARTER アンケート開発環境セットアップガイド**

プロジェクトに新しく「11. 開発環境のセットアップとガイドライン」セクションを追加します。このセクションは、本番環境に影響を与えずに安全に開発を行うための手順とベストプラクティスを説明します。

## **11. 開発環境のセットアップとガイドライン**

### **11.1 開発ブランチの作成**

GitHub Pagesで運用されている本番環境に影響を与えないために、開発専用のブランチを使用します。

```bash
# リポジトリをクローン（初回のみ）
git clone https://github.com/QUARTER-salon/survey.git
cd [リポジトリ名]

# 最新の変更を取得
git pull origin main

# 開発用ブランチを作成
git checkout -b 拡張開発
```

### **11.2 ローカル開発環境のセットアップ**

#### **11.2.1 ローカルサーバーの準備**

以下のいずれかの方法でローカルサーバーを起動します：

* **Visual Studio Code + Live Server拡張機能**:
  1. VS Codeで「Live Server」拡張機能をインストール
  2. `index.html`を右クリックして「Live Serverで開く」を選択

* **Python組み込みサーバー**:
  ```bash
  # Python 3
  python -m http.server 8000
  # ブラウザでhttp://localhost:8000を開く
  ```

* **Node.js http-server**:
  ```bash
  # インストール（初回のみ）
  npm install -g http-server
  # プロジェクトフォルダで実行
  http-server -p 8000
  ```

#### **11.2.2 開発用設定ファイルの作成**

1. `js/config-dev.js`ファイルを作成：

```javascript
window.CONFIG = {
  // 開発環境設定
  APPS_SCRIPT_WEBAPP_URL: 'mock-api', // 実際には使用されない
  STORE_REVIEW_URLS: {
    // 本番と同じURLを使用
    'QUARTER': 'https://g.page/r/CfiWzYV0WLCdEBE/review',
    'QUARTER RESORT': 'https://g.page/r/CUpu9_cAhdaGEBE/review',
    'QUARTER SEASONS': 'https://g.page/r/CWAu_dLl0DJmEBE/review',
    'LINK': 'https://g.page/r/CYLblbqgWXsREBE/review',
    'iL': 'https://g.page/r/CemPjkInZSpLEBE/review'
  },
  IS_DEV: true // 開発環境フラグ
};
```

2. `js/mock-api.js`ファイルを作成：

```javascript
/**
 * 開発環境用モックAPI
 * Google Apps Scriptへの実際の送信をシミュレートします
 * 注意: 本番環境へのプッシュ前にindex.htmlから関連スクリプトを削除すること
 */
if (window.CONFIG && window.CONFIG.IS_DEV) {
  // 元の関数を保存
  window.originalSubmitFormData = window.submitFormData;
  
  // モック関数で置き換え
  window.submitFormData = function(dataObj) {
    console.log('開発モード - 送信データ:', dataObj);
    
    // モックレスポンスを返す
    setTimeout(() => {
      // 成功レスポンスをシミュレート
      const mockResponse = {success: true};
      console.log('開発モード - 応答:', mockResponse);
      
      // フォーム送信後の処理を呼び出し
      const rating = parseInt(dataObj.rating) || 3;
      if (typeof window.handleFormAfterSubmission === 'function') {
        window.handleFormAfterSubmission(rating, dataObj);
      }
    }, 500); // リアルな遅延をシミュレート
    
    return false; // 実際の送信を防止
  };
}
```

3. 開発用スクリプトタグを`index.html`に追加（一時的な変更）：

```html
<!-- 開発モード用の設定とモック (本番環境にはプッシュしない) -->
<script src="js/config-dev.js"></script>
<script src="js/mock-api.js"></script>

<!-- 本番設定 -->
<script src="js/config.js"></script>
```

4. `.gitignore`に開発ファイルを追加（リポジトリのルートに作成または更新）：

```
# 開発用ファイル
js/config-dev.js
js/mock-api.js
```

### **11.3 開発からデプロイまでのワークフロー**

#### **11.3.1 開発サイクル**

1. 開発ブランチで機能実装・修正を行う
2. ローカル環境でテスト
3. 変更をコミット

```bash
git add .
git commit -m "機能の追加: XXX"
```

#### **11.3.2 本番環境への反映手順**

1. 開発用ファイルの削除またはコメントアウト：
   - `index.html`から開発用スクリプトタグを削除
   - 一時的なデバッグコードを削除

2. 最終テストを実施

3. 本番ブランチにマージ：

```bash
# 本番ブランチに切り替え
git checkout main

# 開発ブランチの変更をマージ
git merge 開発ブランチ名

# 変更をリモートリポジトリにプッシュ
git push origin main
```

### **11.4 開発時の注意点**

1. **常に開発ブランチで作業する**：
   - 本番ブランチ（main）に直接変更を加えない
   - 複数の機能追加は別々のブランチで行うことを推奨

2. **バックエンド連携**：
   - 実際のGAS APIとの連携が必要な場合は、テスト用のスプレッドシートとApps Scriptを別途作成することを検討

3. **パフォーマンステスト**：
   - モバイルデバイスでの動作確認を忘れずに実施
   - レスポンシブデザインの崩れがないか確認

4. **コードレビュー**：
   - 本番環境への反映前に、複数人でのレビューを推奨
   - 改修による既存機能への影響を確認

5. **デプロイ後の確認**：
   - GitHub Pagesへのデプロイ後、実際の環境で動作確認を行う
   - 問題があれば迅速にロールバックできるよう準備

### **11.5 プロジェクト拡張の際のディレクトリ構造**

新機能追加時は既存の構造を維持し、以下のように拡張します：

```
│
├── index.html                     // HTMLメインファイル
├── README.md                      // プロジェクト説明書
├── css/
│   ├── styles.css                 // メインスタイル
│   ├── responsive.css             // レスポンシブデザイン用
│   ├── layout-fix.css             // レイアウト統一用
│   ├── style-fix.css              // 幅修正用
│   └── [新規スタイル].css          // 拡張機能用スタイル
├── js/
│   ├── config.js                  // 設定ファイル
│   ├── config-dev.js              // 開発用設定（本番環境には含めない）
│   ├── mock-api.js                // APIモック（本番環境には含めない）
│   ├── dynamic-services.js        // 動的サービス機能
│   ├── main.js                    // メインのJavaScript
│   ├── navigation.js              // ナビゲーション機能
│   ├── validation.js              // フォームのバリデーション
│   ├── star-rating.js             // 星評価機能
│   ├── scroll-monitor.js          // スクロール監視機能
│   └── [新規機能].js              // 拡張機能用スクリプト
└── images/
    └── quarter-logo.png           // ロゴ画像
```

---

このガイドに従うことで、本番環境に影響を与えず安全に開発を進めることができます。各開発者は自分のローカル環境で変更をテストし、確認が取れたら本番環境に反映するというワークフローを維持してください。
</file>

<file path="js/menu-formatter.js">
/**
 * QUARTERアンケート - メニュー表示改善スクリプト
 * メニュー項目のテキストを解析し、タイトルと説明を構造化します。
 */

// DOM読み込み完了後に実行
document.addEventListener('DOMContentLoaded', function() {
    // i18nextの読み込みを確認
    if (window.i18next) {
      // 初期化後とページ言語変更時に実行
      i18next.on('initialized', initMenuFormatter);
      i18next.on('languageChanged', initMenuFormatter);
    } else {
      // i18nextがない場合は直接実行
      setTimeout(initMenuFormatter, 500);
    }
  });
  
  /**
   * メニューフォーマッターの初期化
   */
  function initMenuFormatter() {
    // 選択肢ラベルの整形を実行
    formatLabels();
    
    // DOM変更を監視して動的な変更に対応
    setupMutationObserver();
  }
  
  /**
   * 全てのメニューラベルを整形する
   */
  function formatLabels() {
    // 対象のセレクター - アンケート内の全ラベル
    const selectors = [
      '#question14 .options label',  // 追加サービス
      '.collapsible-group .options label',  // アコーディオン内ラベル
      '.options label'  // その他一般的なラベル
    ];
    
    // 各セレクターに対して処理を実行
    selectors.forEach(selector => {
      const labels = document.querySelectorAll(selector);
      
      labels.forEach(label => {
        formatSingleLabel(label);
      });
    });
  }
  
  /**
   * 単一のラベルを整形する
   * @param {HTMLElement} label - 整形対象のラベル要素
   */
  function formatSingleLabel(label) {
    // 既に処理済みかチェック
    if (label.querySelector('.menu-title') || label.querySelector('.menu-description')) {
      return; // 処理済みならスキップ
    }
    
    // ラベルのテキストを取得
    const text = label.textContent.trim();
    
    // 各種分離パターン - 日本語に適した正規表現
    const patterns = [
      { regex: /(.*?)\s*\((.+?)\)/, titleIndex: 1, descIndex: 2 },  // 半角括弧パターン（英語）
      { regex: /(.*?)（(.+?)）/, titleIndex: 1, descIndex: 2 },  // 括弧パターン（日本語）
      { regex: /(.*?)【(.+?)】/, titleIndex: 1, descIndex: 2 },  // 角括弧パターン
      { regex: /(.*?)\s*[:：]\s*(.+)/, titleIndex: 1, descIndex: 2 },  // コロンパターン
      { regex: /(.*?)・(.+)/, titleIndex: 1, descIndex: 2 },  // 中黒パターン
      { regex: /(.*?)\s+-\s+(.+)/, titleIndex: 1, descIndex: 2 }  // ハイフンパターン
    ];
    
    // テキスト分割用の変数
    let titleText = text;
    let descText = '';
    
    // パターンマッチング
    for (const pattern of patterns) {
      if (pattern.regex.test(text)) {
        const match = text.match(pattern.regex);
        titleText = match[pattern.titleIndex].trim();
        descText = match[pattern.descIndex].trim();
        break; // 最初にマッチしたパターンで処理
      }
    }
    
    // スペースでの分割（テキストが長い場合のみ）
    if (descText === '' && text.length > 15) {
      const spacePattern = /(.*?) (.+)/;
      if (spacePattern.test(text)) {
        const match = text.match(spacePattern);
        // 説明部分が十分に長い場合のみ適用
        if (match[2].length > 10) {
          titleText = match[1].trim();
          descText = match[2].trim();
        }
      }
    }
    
    // 元のテキストを保存
    const originalText = label.textContent;
    
    // 既存のHTML内容をクリア
    label.innerHTML = '';
    
    // タイトル要素を追加
    const titleSpan = document.createElement('span');
    titleSpan.className = 'menu-title';
    titleSpan.textContent = titleText;
    label.appendChild(titleSpan);
    
    // 説明テキストがある場合は説明要素も追加
    if (descText) {
      const descSpan = document.createElement('span');
      descSpan.className = 'menu-description';
      descSpan.textContent = descText;
      label.appendChild(descSpan);
    }
    
    // アクセシビリティのために元のテキストを維持
    label.setAttribute('aria-label', originalText);
  }
  
  /**
   * DOM変更監視の設定
   * 動的なコンテンツ変更に対応するためのMutationObserver
   */
  function setupMutationObserver() {
    // 監視対象のコンテナ
    const containers = [
      document.getElementById('question14'),
      document.querySelector('.collapsible-group'),
      document.querySelector('form')
    ];
    
    // コンテナごとに監視を設定
    containers.forEach(container => {
      if (!container) return;
      
      // オブザーバー設定
      const config = { 
        childList: true,  // 子要素の変更を監視
        subtree: true,    // すべての子孫要素も監視
        characterData: true // テキスト変更も監視
      };
      
      // 監視コールバック
      const callback = function(mutationsList, observer) {
        let needsUpdate = false;
        
        for (const mutation of mutationsList) {
          if (mutation.type === 'childList' || mutation.type === 'characterData') {
            needsUpdate = true;
            break;
          }
        }
        
        if (needsUpdate) {
          // DOM更新後の処理に少し遅延を入れる
          setTimeout(formatLabels, 100);
        }
      };
      
      // オブザーバーを作成して監視開始
      const observer = new MutationObserver(callback);
      observer.observe(container, config);
    });
  }
  
  /**
   * メニュー表示の手動更新関数
   * 外部から呼び出せるようにグローバルに公開
   */
  window.updateMenuFormatting = function() {
    formatLabels();
  };
</file>

<file path="locales/en/translation.json">
{
    "nav.store": "Store",
    "nav.rating": "Rating",
    "nav.info": "Information",
    "nav.service": "Service",
    "nav.feedback": "Feedback",
  
    "q1.title": "Q1. Which store did you visit today?",
    "q2.title": "Q2. Overall satisfaction (1–5 stars)",
    "rating.prefix": "Rating:",
    
    "optional.note": "The following questions are optional. Your responses will be very helpful for us.",
    
    "q3.title": "Q3. Please tell us your name (optional)",
    "q3.placeholder": "Enter your name or nickname",
    
    "q4.title": "Q4. Your visit to our store was... (optional)",
    "q4.firstTime": "First time (New customer)",
    "q4.repeat": "Repeat visit (Regular customer)",
    
    "q5.title": "Q5. Please tell us your gender (optional)",
    "q5.male": "Male",
    "q5.female": "Female",
    "q5.other": "Other",
    
    "q6.title": "Q6. Please tell us your age range (optional)",
    "q6.age10s": "10s",
    "q6.age20s": "20s",
    "q6.age30s": "30s",
    "q6.age40s": "40s",
    "q6.age50s": "50s",
    "q6.age60plus": "60s or above",
    
    "q7.title": "Q7. Which services did you use today? (Multiple selections possible)",
    "q7.cut": "Haircut",
    "q7.color": "Hair coloring",
    "q7.perm": "Perm",
    "q7.treatment": "Treatment",
    "q7.headspa": "Head spa",
    "q7.other": "Other (Nail, Kimono dressing, etc.)",
    "q7.il.eyelashExt": "Eyelash extensions",
    "q7.il.eyelashPerm": "Eyelash perm",
    "q7.il.wax": "Waxing services",
    "q7.il.other": "Other services",
    
    "q8.title": "Q8. How satisfied were you with the technical skill and result of your service?",
    "q8.veryGood": "Very satisfied",
    "q8.good": "Satisfied",
    "q8.normal": "Neutral",
    "q8.bad": "Dissatisfied",
    "q8.veryBad": "Very dissatisfied",
    
    "q9.title": "Q9. How was our staff's customer service?",
    "q9.veryGood": "Very good",
    "q9.good": "Good",
    "q9.normal": "Neutral",
    "q9.bad": "Poor",
    "q9.veryBad": "Very poor",
    
    "q10.title": "Q10. What did you think about the waiting time from arrival to the start of your service?",
    "q10.veryGood": "Very satisfied",
    "q10.good": "Satisfied",
    "q10.normal": "Neutral",
    "q10.bad": "Dissatisfied",
    "q10.veryBad": "Very dissatisfied",
    
    "q11.title": "Q11. What was your impression of our salon's atmosphere and cleanliness?",
    "q11.veryGood": "Very clean",
    "q11.good": "Clean",
    "q11.normal": "Neutral",
    "q11.bad": "Unclean",
    "q11.veryBad": "Very unclean",
    
    "q12.title": "Q12. Please let us know if you have any requests or suggestions for improvement (optional)",
    "q12.placeholder": "Enter your suggestions here",
    
    "q13.title": "Q13. Please share any other thoughts or observations about your experience at our salon (optional)",
    "q13.placeholder": "Enter your feedback here",

    
    "q14.title": "Q14. What additional services would you like us to offer? (Multiple selections possible)",

    "q14.grp.haircare": "Specialized Hair Care Menu",
    "q14.treat": "Hair Quality Improvement Treatment (Damage repair, frizz control, etc.)",
    "q14.organicColor": "Organic/Plant-based Hair Color (For sensitive scalp and skin care)",
    "q14.scalp": "Expanded Scalp Care Menu (Improving scalp environment for healthier hair)",

    "q14.grp.trend": "Trending Hair Styling Techniques",
    "q14.innerColor": "Inner Color (Natural surface with playful colors underneath)",
    "q14.balayage": "Balayage/Gradient Color (Natural dimensional finish)",
    "q14.extension": "Hair Extensions (Temporary added length or volume)",
    "q14.koreanSet": "K-Pop Inspired Styling (Korean idol-style hair setting)",

    "q14.grp.beauty": "Esthetic & Beauty Services",
    "q14.lashPerm": "Eyelash Perm/Extensions",
    "q14.eyebrow": "Eyebrow Design (Full eyebrow styling and shaping)",
    "q14.facial": "Facial Treatments (Face massage and mask therapy)",

    "q14.grp.men": "Men's Specialized Menu",
    "q14.mensShave": "Men's Beard Care/Shaving",
    "q14.mensScalp": "Men's Scalp & Eyebrow Design",
    "q14.mensMake": "Men's Makeup",
    "q14.mensFacial": "Men's Facial Care",
    "q14.mensLesson": "Business Hairstyling Workshop (Learn to style your own hair)",

    "q14.grp.package": "Special Packages & Membership",
    "q14.bridal": "Bridal Beauty Plan (Multiple care sessions for wedding preparation)",
    "q14.season": "Seasonal Care (Summer UV protection, winter dry-skin prevention, etc.)",
    "q14.family": "Family Plan (Discounts for parent-child or couples visits)",
    "q14.subscription": "Monthly Subscription Hair Care (Fixed-price monthly maintenance)",

    "q14.grp.digital": "Digital Services",
    "q14.aiSim": "AI Hairstyle Simulation (Preview suitable styles before appointment)",
    "q14.onlineConsult": "Online Hair Consultation (Video consultation before visit)",
    "q14.app": "Hair Care App Integration (Visit history and home care management)",
    
    "validation.global": "Please fill in all required fields",
    "validation.store": "Please select a store",
    "validation.rating": "Please select a rating",
    "submit": "Submit",
    
    "thankyou.title": "Thank you for your response.",
    "thankyou.low": "We sincerely appreciate your feedback and will work to improve our services. We look forward to serving you again at the QUARTER group.",
    "thankyou.high": "Thank you for your high rating!",
    "thankyou.high.text1": "We sincerely appreciate your visit to our salon.",
    "thankyou.high.text2": "If you don't mind, we would be greatly encouraged if you could copy the comment below and post it on Google Maps.",
    "thankyou.high.text3": "• Copy the comment with the button below<br>• Simply paste it when the review page opens",
    "thankyou.copy.hint": "※ This text cannot be edited now, but you can edit it after pasting it on the Google Maps review page.",
    "thankyou.copy.button": "Copy Comment",
    "thankyou.redirect.button": "Post a Review on Google Maps",
    "thankyou.high.text4": "We will continue to refine our skills to ensure customer satisfaction.<br>Thank you for your continued support of the QUARTER group."
  }
</file>

<file path="locales/zh/translation.json">
{
    "nav.store": "店铺",
    "nav.rating": "评价",
    "nav.info": "信息",
    "nav.service": "服务",
    "nav.feedback": "感想",
  
    "q1.title": "Q1. 今天您光顾了哪家店铺？",
    "q2.title": "Q2. 请用1-5星评价您的总体满意度",
    "rating.prefix": "评分:",
    
    "optional.note": "以下问题为选填项目。您的回答对我们非常有参考价值。",
    
    "q3.title": "Q3. 请告诉我们您的姓名（选填）",
    "q3.placeholder": "请输入您的姓名或昵称",
    
    "q4.title": "Q4. 您对本店的光临是...（选填）",
    "q4.firstTime": "初次光临（新顾客）",
    "q4.repeat": "再次光临（回头客）",
    
    "q5.title": "Q5. 请告诉我们您的性别（选填）",
    "q5.male": "男性",
    "q5.female": "女性",
    "q5.other": "其他",
    
    "q6.title": "Q6. 请告诉我们您的年龄段（选填）",
    "q6.age10s": "10多岁",
    "q6.age20s": "20多岁",
    "q6.age30s": "30多岁",
    "q6.age40s": "40多岁",
    "q6.age50s": "50多岁",
    "q6.age60plus": "60岁以上",
    
    "q7.title": "Q7. 今天您使用了哪些服务项目？（可多选）",
    "q7.cut": "剪发",
    "q7.color": "染发",
    "q7.perm": "烫发",
    "q7.treatment": "护理",
    "q7.headspa": "头皮护理",
    "q7.other": "其他（美甲、和服穿戴等）",
    "q7.il.eyelashExt": "睫毛嫁接",
    "q7.il.eyelashPerm": "睫毛烫",
    "q7.il.wax": "脱毛服务",
    "q7.il.other": "其他服务",
    
    "q8.title": "Q8. 您对服务技术和效果的满意度如何？",
    "q8.veryGood": "非常满意",
    "q8.good": "满意",
    "q8.normal": "一般",
    "q8.bad": "不满意",
    "q8.veryBad": "非常不满意",
    
    "q9.title": "Q9. 您认为我们的工作人员服务态度如何？",
    "q9.veryGood": "非常好",
    "q9.good": "好",
    "q9.normal": "一般",
    "q9.bad": "差",
    "q9.veryBad": "非常差",
    
    "q10.title": "Q10. 从到店到开始服务的等待时间，您的感受如何？",
    "q10.veryGood": "非常满意",
    "q10.good": "满意",
    "q10.normal": "一般",
    "q10.bad": "不满意",
    "q10.veryBad": "非常不满意",
    
    "q11.title": "Q11. 您对店内环境和清洁度的印象如何？",
    "q11.veryGood": "非常干净",
    "q11.good": "干净",
    "q11.normal": "一般",
    "q11.bad": "不干净",
    "q11.veryBad": "非常不干净",
    
    "q12.title": "Q12. 如果您有任何建议或改进意见，请告诉我们（选填）",
    "q12.placeholder": "请在此输入您的建议",
    
    "q13.title": "Q13. 请分享您在本店的其他体验感受或观察（选填）",
    "q13.placeholder": "请在此输入您的感想",

    
    "q14.title": "Q14. 您希望我们增加哪些服务项目？（可多选）",

    "q14.grp.haircare": "专业护发菜单",
    "q14.treat": "发质改善护理（修复受损发质、改善卷曲发质等专业护理）",
    "q14.organicColor": "有机染发 / 植物提取染发（适合敏感肌肤、注重头皮护理）",
    "q14.scalp": "头皮护理菜单扩充（改善头皮环境，促进健康发质）",

    "q14.grp.trend": "流行发型技术",
    "q14.innerColor": "内层挑染（表面保持自然色调，内层添加个性色彩）",
    "q14.balayage": "空气感挑染 / 渐变染发（自然立体效果）",
    "q14.extension": "接发服务（临时增加发长或发量）",
    "q14.koreanSet": "韩式发型设计（K-POP偶像风格）",

    "q14.grp.beauty": "美容相关服务",
    "q14.lashPerm": "睫毛烫 / 睫毛嫁接",
    "q14.eyebrow": "眉形设计（眉毛全面塑形）",
    "q14.facial": "面部护理（面部按摩和面膜护理）",

    "q14.grp.men": "男士专属服务",
    "q14.mensShave": "男士胡须护理 / 修剪",
    "q14.mensScalp": "男士头皮护理 & 眉形设计",
    "q14.mensMake": "男士彩妆",
    "q14.mensFacial": "男士面部护理",
    "q14.mensLesson": "商务男士发型自理课程（学习自己打理发型）",

    "q14.grp.package": "特别套餐与会员制度",
    "q14.bridal": "新娘美容套餐（为婚礼准备的多次护理计划）",
    "q14.season": "季节限定护理（夏季防紫外线、冬季防干燥等）",
    "q14.family": "家庭优惠计划（亲子或情侣同行折扣）",
    "q14.subscription": "月度定额护发计划（每月一次的定额保养服务）",

    "q14.grp.digital": "数字化服务",
    "q14.aiSim": "AI发型模拟（预先确认适合的发型）",
    "q14.onlineConsult": "线上发型咨询（来店前的视频咨询）",
    "q14.app": "护发应用程序连动服务（访问记录和家庭护理管理）",
    
    "validation.global": "请填写所有必填项",
    "validation.store": "请选择店铺",
    "validation.rating": "请选择评价",
    "submit": "提交",
    
    "thankyou.title": "感谢您的回答。",
    "thankyou.low": "我们真诚感谢您的反馈，并将努力改进我们的服务。期待您再次惠顾QUARTER集团。",
    "thankyou.high": "感谢您的高度评价！",
    "thankyou.high.text1": "非常感谢您光临本店。",
    "thankyou.high.text2": "如果您不介意，希望您能将以下评论复制并发布到谷歌地图，这将对我们是莫大的鼓励。",
    "thankyou.high.text3": "• 使用下方按钮复制评论<br>• 打开评论页面后直接粘贴即可",
    "thankyou.copy.hint": "※ 此文本现在无法编辑，但粘贴到谷歌地图评论页面后可以编辑。",
    "thankyou.copy.button": "复制评论",
    "thankyou.redirect.button": "在谷歌地图上发表评论",
    "thankyou.high.text4": "我们将继续提升技能，确保客户满意。<br>感谢您持续支持QUARTER集团。"
  }
</file>

<file path=".gitignore">
# 開発用設定ファイル
js/config-dev.js
js/mock-api.js
</file>

<file path="locales/ja/translation.json">
{
    "nav.store": "店舗",
    "nav.rating": "評価",
    "nav.info": "情報",
    "nav.service": "サービス",
    "nav.feedback": "感想",
  
    "q1.title": "Q1. 本日はどちらの店舗をご利用いただきましたか？",
    "q2.title": "Q2. 本日の総合満足度を星1～5でお聞かせください。",
    "rating.prefix": "評価:",
    
    "optional.note": "以下の質問は任意です。ご回答いただけると大変参考になります。",
    
    "q3.title": "Q3. お名前をお聞かせください。（任意）",
    "q3.placeholder": "お名前またはニックネームをご記入ください",
    
    "q4.title": "Q4. 当店へのご来店は…（任意）",
    "q4.firstTime": "初めて（新規）",
    "q4.repeat": "2回目以降（リピーター）",
    
    "q5.title": "Q5. お客様の性別をお聞かせください。（任意）",
    "q5.male": "男性",
    "q5.female": "女性",
    "q5.other": "その他",
    
    "q6.title": "Q6. お客様のご年齢をお聞かせください。（任意）",
    "q6.age10s": "10代",
    "q6.age20s": "20代",
    "q6.age30s": "30代",
    "q6.age40s": "40代",
    "q6.age50s": "50代",
    "q6.age60plus": "60代以上",
    
    "q7.title": "Q7. 本日ご利用いただいたメニューをお選びください。（複数選択可）",
    "q7.cut": "カット",
    "q7.color": "カラー",
    "q7.perm": "パーマ",
    "q7.treatment": "トリートメント",
    "q7.headspa": "ヘッドスパ",
    "q7.other": "その他（ネイル・着付け 等）",
    "q7.il.eyelashExt": "まつ毛エクステ",
    "q7.il.eyelashPerm": "まつ毛パーマ",
    "q7.il.wax": "WAXメニュー",
    "q7.il.other": "その他メニュー",
    
    "q8.title": "Q8. 施術の技術や仕上がりに対する満足度をお聞かせください。",
    "q8.veryGood": "非常に満足",
    "q8.good": "満足",
    "q8.normal": "普通",
    "q8.bad": "不満",
    "q8.veryBad": "非常に不満",
    
    "q9.title": "Q9. スタッフの接客対応はいかがでしたか？",
    "q9.veryGood": "非常に良い",
    "q9.good": "良い",
    "q9.normal": "普通",
    "q9.bad": "悪い",
    "q9.veryBad": "非常に悪い",
    
    "q10.title": "Q10. ご来店から施術開始までの時間についてのご感想をお聞かせください。",
    "q10.veryGood": "非常に満足",
    "q10.good": "満足",
    "q10.normal": "普通",
    "q10.bad": "不満",
    "q10.veryBad": "非常に不満",
    
    "q11.title": "Q11. 店内の空間や清潔感についてのご印象をお聞かせください。",
    "q11.veryGood": "非常に清潔",
    "q11.good": "清潔",
    "q11.normal": "普通",
    "q11.bad": "不清潔",
    "q11.veryBad": "非常に不清潔",
    
    "q12.title": "Q12. ご要望や改善点などがございましたら、ぜひお聞かせください。（任意）",
    "q12.placeholder": "ご意見をご記入ください",
    
    "q13.title": "Q13. その他、当店での体験についてのご感想やお気づきの点をお聞かせください。（任意）",
    "q13.placeholder": "ご感想をご記入ください",

    
    
        "q14.title": "Q14. 追加して欲しいサービスはございますか？（複数選択可）",
      
        "q14.grp.haircare": "ヘアケア特化メニュー",
        "q14.treat": "髪質改善トリートメント（ダメージ修復・くせ毛改善など専門的なケア）",
        "q14.organicColor": "オーガニックカラー / 植物由来カラー（敏感肌・頭皮ケア重視の方向け）",
        "q14.scalp": "スキャルプケアメニューの拡充（頭皮環境改善による健康な髪づくり）",
      
        "q14.grp.trend": "トレンドヘアスタイル技術",
        "q14.innerColor": "インナーカラー（表面は自然な色味で内側に遊び心のある色を入れる）",
        "q14.balayage": "バレイヤージュ / グラデーションカラー（自然な立体感のある仕上がり）",
        "q14.extension": "ヘアエクステンション（長さや量を一時的に追加）",
        "q14.koreanSet": "韓国風ヘアセット（K-POPアイドル風スタイリング）",
      
        "q14.grp.beauty": "エステ・美容関連",
        "q14.lashPerm": "まつげパーマ / まつげエクステ",
        "q14.eyebrow": "アイブロウデザイン（眉毛のフルメイク・形成）",
        "q14.facial": "フェイシャルエステ（顔のマッサージ・パック）",
      
        "q14.grp.men": "男性向け特化メニュー",
        "q14.mensShave": "メンズヒゲケア / シェービング",
        "q14.mensScalp": "メンズスキャルプ & 眉デザイン",
        "q14.mensMake": "メンズメイク",
        "q14.mensFacial": "男性向けフェイシャルケア",
        "q14.mensLesson": "ビジネスマン向けヘアセット講座（自分でセットする方法を学べる）",
      
        "q14.grp.package": "特別パッケージ・会員制度",
        "q14.bridal": "ブライダル総合プラン（結婚式に向けた複数回のケア）",
        "q14.season": "季節限定ケア（夏の紫外線対策、冬の乾燥対策など）",
        "q14.family": "ファミリープラン（親子・カップルでの来店割引）",
        "q14.subscription": "月額定額制ヘアケア（月1回のメンテナンスが定額で受けられる）",
      
        "q14.grp.digital": "デジタル活用サービス",
        "q14.aiSim": "AIヘアスタイルシミュレーション（似合うスタイルの事前確認）",
        "q14.onlineConsult": "オンラインヘア相談（来店前のビデオ相談）",
        "q14.app": "ヘアケアアプリ連動サービス（来店履歴・ホームケア管理）",
      
    
    "validation.global": "必須項目をご入力ください",
    "validation.store": "店舗を選択してください",
    "validation.rating": "評価を選択してください",
    "submit": "送信する",
    
    "thankyou.title": "ご回答ありがとうございました。",
    "thankyou.low": "いただいたご意見を真摯に受け止め、サービスの向上に努めてまいります。今後ともQUARTERグループをよろしくお願いいたします。",
    "thankyou.high": "高評価ありがとうございます！",
    "thankyou.high.text1": "当店をご利用いただき、心より感謝申し上げます。",
    "thankyou.high.text2": "もしよろしければ、以下のコメントをコピーして「Googleマップ」にご投稿いただけますと大変励みになります。",
    "thankyou.high.text3": "・下のボタンでコメントをコピー<br>・投稿ページが開いたらペーストするだけです",
    "thankyou.copy.hint": "※このテキストは現在編集できませんが、Googleマップの口コミページにペーストした後は編集できます。",
    "thankyou.copy.button": "コメントをコピー",
    "thankyou.redirect.button": "Googleマップで口コミを投稿する",
    "thankyou.high.text4": "今後もお客様にご満足いただけるよう、スタッフ一同技術を磨いてまいります。<br>引き続きQUARTERグループをよろしくお願いいたします。"
  }
</file>

<file path="css/accordion-style.css">
/* ============================================
   QUARTERアンケート - おしゃれなアコーディオンスタイル
   プルダウンの直感性と高級感を向上させるスタイル
   ============================================ */

/* ----------------------------------------
   アコーディオン基本スタイル
   高級感のあるプルダウンデザイン
   ---------------------------------------- */
   .collapsible-group details {
    border: 1px solid var(--border-color);
    margin-bottom: var(--spacing-sm);
    background: white;
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
    border-left: 3px solid var(--primary-color);
  }
  
  /* ホバー効果の追加 */
  .collapsible-group details:hover {
    box-shadow: 0 2px 8px rgba(195, 144, 0, 0.1);
    transform: translateY(-1px);
  }

  .collapsible-group li {
      list-style: none;            /* 左端の「・」を完全に無効化 */
      margin: 0;                   /* 余白もリセット */
      padding: 0;
    }
  
  /* サマリー（クリック可能な見出し部分）のスタイル改善 */
  .collapsible-group summary {
      padding: 12px 40px 12px 16px; /* 右側に 40px の余白 → 矢印用 */
      font-weight: 500;
      cursor: pointer;
      list-style: none;
      position: relative;
      background-color: white;
      transition: all 0.3s ease;
      display: block;              /* 左詰め */
      letter-spacing: 0.5px;
     }
  
  /* Safariなどでリスト記号を非表示にするため */
  .collapsible-group summary::-webkit-details-marker {
    display: none;
  }
  
  /* ----------------------------------------
     プルダウン矢印の追加
     直感的な操作感のための視覚的手がかり
     ---------------------------------------- */
  /* カスタム矢印をサマリーの後に追加 */
  .collapsible-group summary::after {
    content: ""; /* 疑似要素にコンテンツを追加 */
    width: 12px;
    height: 12px;
    border-right: 2px solid var(--primary-color);
    border-bottom: 2px solid var(--primary-color);
    transform: rotate(45deg); /* 下向き矢印の形に回転 */
    transition: transform 0.3s ease, opacity 0.3s ease;
    position: absolute;
    right: 16px;
    opacity: 0.7;
  }
  
  /* ホバー時の矢印スタイル */
  .collapsible-group summary:hover::after {
    opacity: 1;
    transform: rotate(45deg) scale(1.1);
  }
  
  /* 開いた状態の矢印を上向きに変更 */
  .collapsible-group details[open] summary::after {
    transform: rotate(-135deg); /* 上向き矢印に変更 */
  }
  
  /* ----------------------------------------
     開閉時のアニメーション効果
     エレガントな動きによる高級感の演出
     ---------------------------------------- */
  /* 開閉時のサマリースタイル変更 */
  .collapsible-group details[open] summary {
    background: linear-gradient(to right, rgba(230, 216, 179, 0.15), white);
    border-bottom: 1px solid var(--border-color);
    color: var(--primary-color);
  }
  
  /* 開いた時のサマリーのホバー効果 */
  .collapsible-group details[open]:hover {
    box-shadow: 0 3px 10px rgba(195, 144, 0, 0.12);
  }
  
  /* オプションコンテナのアニメーション設定 */
  .collapsible-group .options {
    padding: 16px;
    animation: fadeSlideDown 0.3s ease-out;
    border-top: none;
  }
  
  /* フェードイン＋スライドダウンアニメーション */
  @keyframes fadeSlideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* 強調表示（開いた時の左ボーダー変更） */
  .collapsible-group details[open] {
    border-left: 3px solid var(--primary-color);
  }
  
  /* ----------------------------------------
     アコーディオン内の選択肢スタイリング
     選択状態の視覚的表現を統一
     ---------------------------------------- */
  /* アコーディオン内の選択肢のスタイリング */
  .collapsible-group .options input[type="radio"]:checked + label,
  .collapsible-group .options input[type="checkbox"]:checked + label {
    background-color: rgba(230, 216, 179, 0.15); /* 選択時の背景色 */
    border-color: var(--border-color); /* 境界線の色 */
    border-left: 3px solid var(--primary-color); /* 選択時はプライマリーカラー(#C39000)の左境界線 */
    box-shadow: var(--shadow-md); /* 奥行き用の影 */
    font-weight: 500; /* 中程度の太さ */
    transform: translateX(5px); /* 選択時に右へシフト */
  }

  /* 選択肢のラベルのホバー効果 */
  .collapsible-group .options label:hover {
    background-color: rgba(230, 216, 179, 0.1); /* ホバー時の背景 */
    transform: translateX(3px); /* わずかに右へシフト */
    box-shadow: var(--shadow-md); /* 影を追加 */
    border-left: 3px solid var(--primary-color); /* ホバー時もプライマリーカラーの左境界線 */
  }

  /* チェックマークの位置調整 */
  .collapsible-group .options input[type="radio"]:checked + label::after,
  .collapsible-group .options input[type="checkbox"]:checked + label::after {
    content: "✓"; /* チェックマーク */
    position: absolute; /* 絶対位置 */
    right: var(--spacing-md); /* 右揃え */
    color: var(--primary-color); /* ゴールド色 */
    font-weight: bold; /* 太字 */
  }
  
  /* ----------------------------------------
     サマリーテキストの強調
     カテゴリーの視認性向上
     ---------------------------------------- */
  .collapsible-group summary {
    color: var(--text-color);
    font-size: 15px;
    font-weight: 500;
  }
  
  .collapsible-group summary::before {
      content: none;
  }
  
  /* 開いた時のドット強調 */
  .collapsible-group details[open] summary::before {
    opacity: 1;
    background-color: var(--primary-color);
  }
  
  /* ----------------------------------------
     モバイル対応の調整
     小さな画面でも使いやすいデザイン
     ---------------------------------------- */
  @media (max-width: 480px) {
    .collapsible-group summary {
      padding: 10px 14px;
      font-size: 14px;
    }
    
    .collapsible-group summary::after {
      width: 10px;
      height: 10px;
      right: 14px;
    }
    
    .collapsible-group .options {
      padding: 12px;
    }
  }
  
  /* タッチデバイス向けの調整 */
  @media (hover: none) {
    /* タッチデバイスでのタップフィードバック */
    .collapsible-group summary:active {
      background-color: rgba(230, 216, 179, 0.2);
    }
  }
</file>

<file path="js/i18n.js">
(function () {
    // 1. i18next 初期化
    i18next
      .use(i18nextBrowserLanguageDetector)
      .init({
        fallbackLng: 'ja',
        debug: false,
        detection: {               // ←?lang=en でも拾えるよう追加
                  lookupQuerystring: 'lng',
                  // 既定の 'lng' も並行して効く
                },
        resources: {} // 後でロード
      })
      .then(loadResourcesAndRender);
  
    // 2. 翻訳 JSON をフェッチ
    async function loadResourcesAndRender() {
      const lngs = ['ja', 'en', 'zh'];
      await Promise.all(
        lngs.map(async lng => {
          const res = await fetch(`locales/${lng}/translation.json`);
          const json = await res.json();
          i18next.addResources(lng, 'translation', json);
        })
      );
      renderContent();
    }
  
    // 3. DOM 反映（修正版）
    function renderContent() {
      // 通常要素の翻訳
      document.querySelectorAll('[data-i18n]').forEach(el => {
        const key = el.getAttribute('data-i18n');
        const opts = el.dataset.i18nOptions ? JSON.parse(el.dataset.i18nOptions) : {};
        
        // summary要素には特別な処理を適用
        if (el.tagName.toLowerCase() === 'summary') {
          el.textContent = i18next.t(key, opts);
        } else {
          el.innerHTML = i18next.t(key, opts);
        }
      });
      
      // input要素のplaceholder属性などにも対応
      document.querySelectorAll('[data-i18n-placeholder]').forEach(el => {
        const key = el.getAttribute('data-i18n-placeholder');
        el.setAttribute('placeholder', i18next.t(key));
      });
      
      // バリデーションメッセージなど JS 生成文字列も更新
      if (window.updateValidationMessages) window.updateValidationMessages();
      
      // メニュー整形も翻訳後に実行
      if (window.updateMenuFormatting) window.updateMenuFormatting();
    }
  
    // 言語リンクの状態を更新する関数
    function updateLanguageLinks(selectedLang) {
      document.querySelectorAll('.lang-link').forEach(link => {
        if (link.getAttribute('data-lang') === selectedLang) {
          link.classList.add('active');
        } else {
          link.classList.remove('active');
        }
      });
    }
  
    // 4. 言語変更ハンドラ（セレクタ用）
    window.changeLang = function (lng) {
      i18next.changeLanguage(lng).then(() => {
        renderContent();
        updateLanguageLinks(lng);
      });
      localStorage.setItem('lang', lng);
    };
    
    // 5. ページ読み込み時に言語セレクタの値を設定
    document.addEventListener('DOMContentLoaded', () => {
      // 言語セレクタがあれば現在の言語を設定
      const sel = document.getElementById('langSelector');
      if (sel) {
        const cur = i18next.language || 'ja';
        sel.value = cur;
      }
      
      // 言語リンクがあれば現在の言語に合わせてハイライト
      const currentLang = i18next.language || 'ja';
      updateLanguageLinks(currentLang);
    });
})();
</file>

<file path="js/main.js">
/**
 * QUARTERアンケート - メインJavaScript
 * アプリケーション全体の初期化とグローバル機能
 * 
 * このファイルはアプリケーション全体を統括する役割を持ち、
 * ページの読み込み時に最初に実行される初期化処理や、
 * 複数の場所から呼び出される共通機能を定義しています。
 */

// DOM読み込み完了時の処理
// DOMContentLoadedイベントは、HTMLの解析が完了した時点で発火します（画像などのリソース読み込み完了前）
// これにより、ユーザーが画面を見られるようになった早い段階で初期化処理を開始できます
document.addEventListener('DOMContentLoaded', function() {
  // 開発・デバッグ用のログ出力
  console.log('アプリケーション初期化開始');
  
  // 各モジュールが正しく読み込まれたか確認
  // 依存ファイル（config.jsなど）が正しく読み込まれているか確認する安全対策
  checkDependencies();
  
  // 警告メッセージの非表示処理
  // Google Apps Scriptの埋め込み時に表示される不要な警告を隠す処理をセットアップ
  setupWarningHider();
  
  // フォーム送信ボタンのイベントリスナーを設定
  setupFormSubmission();
});

/**
 * 依存関係をチェック
 * 必要なモジュール（設定ファイルなど）が正しく読み込まれているか確認します
 * エラーが発生した場合でもサイトが完全に機能停止しないよう、try-catchで例外を捕捉しています
 */
function checkDependencies() {
  // CONFIGの存在確認
  // try-catchブロックで囲むことで、エラーが発生しても処理が止まらないようにします
  try {
    if (typeof CONFIG !== 'undefined') {
      // 正常に読み込まれている場合
      console.log('CONFIG読み込み成功');
    } else {
      // 変数は存在するが初期化されていない場合
      console.warn('CONFIG変数が見つかりません');
      // warnレベルでログ出力（errorより軽度だが、通常のlogより目立つ）
    }
  } catch (e) {
    // 変数が存在しない場合などのエラー
    console.error('CONFIG読み込みエラー:', e);
    // エラー情報を詳細に出力（デバッグ用）
  }
}

/**
 * ページが完全に読み込まれた後に実行される警告非表示
 * window.loadイベントは、ページ上のすべてのリソース（画像、CSS、iframeなど）の
 * 読み込みが完了した時点で発火します
 */
function setupWarningHider() {
  // loadイベントリスナーを設定
  window.addEventListener('load', function() {
    // 少し遅延させて実行（100ミリ秒 = 0.1秒）
    // これにより、警告メッセージが表示された後に非表示にする時間差を作ります
    setTimeout(function() {
      hideAppsScriptWarnings();
    }, 100);
  });
}

/**
 * Apps Script関連の警告を非表示
 * Google Apps Scriptをウェブアプリとして埋め込む際に表示される
 * 不要な警告メッセージや認証UIを非表示にします
 */
function hideAppsScriptWarnings() {
  // 非表示にする要素のセレクタ
  // querySelectorAllで複数の要素を一度に取得
  const warnings = document.querySelectorAll(
    '.apps-script-warning, div[role="alert"], .script-application-auth-container, .script-application-auth'
  );
  
  // 取得した各要素に対して処理
  warnings.forEach(function(el) {
    // 要素が存在する場合のみ非表示に設定
    if (el) el.style.display = 'none';
  });
}

/**
 * フォーム送信処理の設定
 * 送信ボタンにクリックイベントリスナーを追加し、
 * フォーム送信後の処理を行う関数を呼び出します
 */
function setupFormSubmission() {
  // 送信ボタンを取得
  const submitButton = document.getElementById('submitButton');
  
  // 送信ボタンが存在し、まだイベントリスナーが追加されていない場合のみ追加
  if (submitButton && !submitButton.hasAttribute('data-listener-added')) {
    submitButton.addEventListener('click', function() {
      // validation.jsの関数を呼び出す
      if (typeof window.validateAndSubmit === 'function') {
        window.validateAndSubmit();
      }
    });
    // イベントリスナーが追加されたことを示す属性を設定
    submitButton.setAttribute('data-listener-added', 'true');
  }
}

/**
 * アンケート送信後の処理
 * フォームが送信された後、評価に応じて適切なフィードバック画面を表示し、
 * 送信ボタンを非表示にします
 * 
 * @param {number} rating - 選択された評価値（1～5）
 */
window.handleFormAfterSubmission = function(rating, dataObj) {
  try {
    // フォームコンテナを取得
    const surveyForm = document.getElementById('surveyForm');
    
    // 送信ボタンのコンテナを取得
    const submitContainer = document.querySelector('.submit-container');
    
    // 評価に応じたフィードバック要素を取得
    const thankYouMessage = document.getElementById('thankyou');
    const reviewRedirect = document.getElementById('review-redirect');
    
    // すべての要素が存在するか確認
    if (!surveyForm || !submitContainer || !thankYouMessage || !reviewRedirect) {
      console.error('必要なDOM要素が見つかりません');
      return;
    }
    
    // フォームを非表示にする
    surveyForm.classList.add('hidden');
    
    // 送信ボタンを非表示にする
    submitContainer.classList.add('hidden');
    
    // 評価に応じて適切なメッセージを表示
    if (rating >= 4) {
      // 高評価（星4または5）の場合は口コミリダイレクト画面を表示
      reviewRedirect.classList.remove('hidden');
     
      
      // タイトルを星の数に応じて変更
      const titleElement = reviewRedirect.querySelector('h2');
      if (titleElement) {
      // 国際化対応：翻訳キーを使って動的に文言を生成
      titleElement.setAttribute('data-i18n', 'thankyou.high');     // 翻訳キーを付与
      titleElement.setAttribute('data-i18n-options', JSON.stringify({ rating })); // rating も渡す
      titleElement.innerHTML = i18next.t('thankyou.high', { rating });      }
    } else {
      // 低評価（星3以下）の場合はお礼メッセージを表示
      thankYouMessage.classList.remove('hidden');
     
    
    }

    // dataObjがある場合のみ口コミ用コメントを準備
    if (dataObj) {
      prepareReviewComment(dataObj);
    }
    
    // 画面の上部にスクロール
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
    
    console.log(`フォーム送信完了: 評価 ${rating}星`);
  } catch (e) {
    console.error('フォーム送信後処理エラー:', e);
  }
};

/**
 * コメントをクリップボードにコピー
 * ユーザーがコピーボタンをクリックした時に実行される関数
 * 
 * windowオブジェクトのプロパティとして定義することで、HTML内のonclick属性から
 * 直接呼び出せるグローバル関数になります
 */
window.copyComment = function() {
  // コピー対象のテキストエリア要素を取得
  const commentElement = document.getElementById('comment-to-copy');
  if (!commentElement) return; // 要素が存在しない場合は何もせずに終了
  
  // テキストを選択状態にする（視覚的フィードバック用）
  commentElement.select();
  
  try {
    // モダンブラウザ向け: Clipboard API（新しいクリップボードAPI）
    if (navigator.clipboard) {
      // 非同期でクリップボードにテキストを書き込み
      navigator.clipboard.writeText(commentElement.value)
        .then(function() {
          // 成功時の処理
          updateCopyButtonState(true);
        })
        .catch(function(err) {
          // Clipboard APIが失敗した場合（権限がない場合など）
          console.error('コピーエラー:', err);
          // 従来の方法にフォールバック
          fallbackCopy();
        });
    } else {
      // Clipboard APIが使えないブラウザ向け
      fallbackCopy();
    }
  } catch (e) {
    // 予期せぬエラーの場合
    console.error('クリップボードエラー:', e);
    fallbackCopy();
  }
};

/**
 * 古いブラウザ用のコピー機能フォールバック
 * Clipboard APIに対応していない古いブラウザ向けの代替手段
 * document.execCommand('copy')は非推奨ですが、互換性のために残されています
 */
function fallbackCopy() {
  try {
    // 古い方法でコピー実行（選択済みのテキストをコピー）
    document.execCommand('copy');
    // 成功した場合
    updateCopyButtonState(true);
  } catch (fallbackErr) {
    // 古い方法も失敗した場合
    alert('コピーできませんでした。お手数ですが手動でコピーしてください。');
    console.error('フォールバックコピーエラー:', fallbackErr);
  }
}

/**
 * コピーボタンの状態を更新
 * コピー操作の結果に応じてボタンの見た目を変更し、ユーザーにフィードバックを提供します
 * 
 * @param {boolean} success - コピー成功したかどうか（true: 成功、false: 失敗）
 */
function updateCopyButtonState(success) {
  // コピーボタン要素を取得
  const copyButton = document.getElementById('copy-button');
  if (!copyButton) return; // ボタンが存在しない場合は何もせずに終了
  
  // 元のテキストを保存（後で戻すため）
  const originalText = copyButton.textContent;
  
  // 結果に応じてボタンのテキストを変更
  copyButton.textContent = success ? 'コピーしました！' : 'コピーできませんでした';
  // 結果に応じてボタンの背景色を変更（CSS変数を使用）
  copyButton.style.backgroundColor = success ? 'var(--secondary-color)' : 'var(--danger-color)';
  // テキスト色を白に設定
  copyButton.style.color = 'white';
  
  // 2秒後（2000ミリ秒）に元の状態に戻す
  setTimeout(function() {
    // ボタンのテキストを元に戻す
    copyButton.textContent = originalText;
    // ボタンの背景色を元（白）に戻す
    copyButton.style.backgroundColor = 'white';
    // テキスト色をCSSの設定に戻す（''を設定することでスタイル属性を削除）
    copyButton.style.color = '';
  }, 2000);
}

/**
 * Googleマップへリダイレクト
 * レビューリダイレクトボタンがクリックされた時に実行される関数
 * 選択された店舗に対応するGoogleマップのレビューページを新しいタブで開きます
 * 
 * windowオブジェクトのプロパティとして定義することで、HTML内のonclick属性から
 * 直接呼び出せるグローバル関数になります
 */
window.redirectToGoogleMaps = function() {
  try {
    // 選択された店舗のラジオボタンを取得
    const selectedStore = document.querySelector('input[name="store"]:checked');
    // 店舗名を取得（選択されていない場合はデフォルトで'QUARTER'を使用）
    const storeName = selectedStore ? selectedStore.value : 'QUARTER';
    
    // 設定からURLを取得して新しいタブで開く
    if (typeof CONFIG !== 'undefined' && CONFIG.STORE_REVIEW_URLS) {
      // 選択された店舗のURL、またはデフォルトURLを取得
      const url = CONFIG.STORE_REVIEW_URLS[storeName] || CONFIG.STORE_REVIEW_URLS['QUARTER'];
      // 新しいタブでURLを開く
      window.open(url, '_blank');
    } else {
      // 設定が正しく読み込まれていない場合のエラー
      console.error('STORE_REVIEW_URLS が定義されていません');
    }
  } catch (e) {
    // 予期せぬエラーの場合
    console.error('リダイレクトエラー:', e);
  }
};
</file>

<file path="js/validation.js">
/**
 * フォームバリデーションと送信処理
 * フォームの入力検証と送信ロジックを管理
 * 
 * このファイルは、アンケートフォームの入力内容を検証し、
 * エラー表示、送信処理、結果表示などを管理します。
 * ユーザー入力の正当性を確保し、適切なフィードバックを提供するための
 * 一連の機能を実装しています。
 */

// DOM読み込み完了後に初期化
// HTMLが解析された後、画像などのリソース読み込み前に実行
document.addEventListener('DOMContentLoaded', function() {
  initFormValidation();
});

/**
 * フォームのバリデーション機能を初期化
 * 送信ボタンのイベントリスナー設定と、入力フィールドの監視を開始します
 */
function initFormValidation() {
  // 送信ボタンのイベント処理を設定
// クリックとタッチの両方に対応（デスクトップとモバイル用）
const submitButton = document.querySelector('.submit-button');
if (submitButton && !submitButton.hasAttribute('data-listener-added')) {
  // デスクトップ用のクリックイベント
  submitButton.addEventListener('click', validateAndSubmit);
  // モバイル用のタッチイベント
  submitButton.addEventListener('touchend', function(e) {
    e.preventDefault(); // デフォルトのタッチ動作を防止
    validateAndSubmit(e); // 検証と送信処理を実行
  });
  // イベントリスナーが追加されたことを示す属性を設定
  submitButton.setAttribute('data-listener-added', 'true');
}
  
  // 入力フィールドの変更時にバリデーション状態を更新
  // ユーザーが入力するたびにリアルタイムでフィードバックを提供
  initFormFields();
}

/**
 * フォームフィールドの初期化とイベントリスナー追加
 * 各入力フィールドの変更を監視し、入力状態に応じて表示を更新します
 */
function initFormFields() {
  // すべての質問要素を取得
  const questions = document.querySelectorAll('.question');
  
  // 各質問に対して処理
  questions.forEach(question => {
    // ラジオボタンとチェックボックスの変更イベント
    // これらは選択肢から選ぶタイプの入力
    const inputs = question.querySelectorAll('input[type="radio"], input[type="checkbox"]');
    inputs.forEach(input => {
      // 値が変更されたときのイベント
      input.addEventListener('change', function() {
        // 何かが選択されたら、その質問は「完了」状態にマーク
        markCompleted(question);
      });
    });
    
    // テキストエリアの入力イベント
    // 自由記述欄の入力状態を監視
    const textareas = question.querySelectorAll('textarea');
    textareas.forEach(textarea => {
      // 入力内容が変更されるたびに実行
      textarea.addEventListener('input', function() {
        // テキストが入力されている場合（空白だけではない）
        if (this.value.trim().length > 0) {
          // 完了状態にマーク
          markCompleted(question);
        } else {
          // 空の場合は完了状態を解除
          question.classList.remove('completed');
        }
      });
    });
  });
}

/**
 * 質問を完了状態としてマーク、エラー状態をクリア
 * 入力が完了した質問の視覚的表示を更新します
 * 
 * @param {HTMLElement} question - 質問要素（DOMノード）
 */
function markCompleted(question) {
  // 完了状態のクラスを追加
  question.classList.add('completed');
  // エラー状態のクラスを削除（もし存在すれば）
  question.classList.remove('error');
  
  // 関連するバリデーションメッセージを非表示
  const validationMsg = question.querySelector('.validation-message');
  if (validationMsg) {
    validationMsg.classList.remove('visible');
  }
  
  // グローバルエラーメッセージも非表示
  // 必須項目が入力されると、全体のエラーメッセージも消す
  const globalValidation = document.getElementById('global-validation');
  if (globalValidation) {
    globalValidation.classList.remove('visible');
  }
}

/**
 * フォームのバリデーションと送信処理
 * フォーム全体の検証を行い、問題がなければデータを送信します
 * 
 * @param {Event} e - イベントオブジェクト
 * @returns {boolean} - バリデーション結果（成功時true、失敗時false）
 */
function validateAndSubmit(e) {
  // イベントのデフォルト動作を防止（フォームの自動送信など）
  if (e) e.preventDefault();
  
  // フォーム要素を取得
  const form = document.getElementById('surveyForm');
  if (!form) return false; // フォームが見つからない場合は処理中断
  
  // フォームデータをFormDataオブジェクトとして取得
  // FormDataはHTMLフォームの全データを簡単に収集できるAPIです
  const formData = new FormData(form);
  
  // バリデーション状態のリセット
  // 前回のエラー表示をクリアして新しい検証を開始
  resetValidationState();
  
  // 必須項目のチェック
  // 「店舗選択」と「評価」は必須なので、これらが選択されているか確認
  const storeSelected = document.querySelector('input[name="store"]:checked');
  const ratingSelected = document.querySelector('input[name="rating"]:checked');
  
  let hasErrors = false; // エラーフラグ
  
  // 店舗選択のバリデーション
  // 店舗が選択されていなければエラー
  if (!storeSelected) {
    markError('question1', 'store-validation');
    hasErrors = true;
  }
  
  // 評価選択のバリデーション
  // 評価が選択されていなければエラー
  if (!ratingSelected) {
    markError('question2', 'rating-validation');
    hasErrors = true;
  }
  
  // エラーがある場合の処理
  if (hasErrors) {
    showGlobalError(); // 全体のエラーメッセージを表示
    scrollToFirstError(); // 最初のエラー項目までスクロール
    return false; // 送信処理を中断
  }
  
  // 送信データの準備
  // FormDataオブジェクトを通常のJavaScriptオブジェクトに変換
  const dataObj = formDataToObject(formData);
  
  // 評価と店舗の情報を取得
  // 後の処理で利用するために個別に変数に保存
  const rating = parseInt(dataObj.rating);
  const selectedStore = dataObj.store || 'QUARTER'; // デフォルト値も設定
  
  // 口コミ用コメント設定
  // 高評価の場合に口コミを促すためのコメントを準備
  prepareReviewComment(dataObj);
  
  // フォーム非表示
  // 送信後はフォームを隠し、結果画面を表示
  hideFormElements();
  
// データ送信
// サーバーにデータを送信（API呼び出し）
submitFormData(dataObj);

// 送信後の画面表示処理を呼び出す
if (typeof window.handleFormAfterSubmission === 'function') {
  window.handleFormAfterSubmission(rating, dataObj); // dataObjを追加して渡す
} else {
  // フォールバックとして旧関数を使用
  showResult(rating);
}
  
  return true; // 処理成功
}

/**
 * バリデーション状態をリセット
 * 以前のエラー表示をすべてクリアします
 */
function resetValidationState() {
  // すべてのバリデーションメッセージを非表示に
  document.querySelectorAll('.validation-message').forEach(msg => {
    msg.classList.remove('visible');
  });
  
  // すべての質問からエラー状態を解除
  document.querySelectorAll('.question.error').forEach(q => {
    q.classList.remove('error');
  });
}

/**
 * エラー表示を設定
 * 指定された質問とそれに対応するバリデーションメッセージにエラー表示を設定します
 * 
 * @param {string} questionId - 質問要素のID
 * @param {string} validationId - バリデーションメッセージのID
 */
function markError(questionId, validationId) {
  // 質問要素を取得
  const question = document.getElementById(questionId);
  // 対応するバリデーションメッセージを取得
  const validation = document.getElementById(validationId);
  
  // エラー状態のクラスを追加
  if (question) question.classList.add('error');
  // バリデーションメッセージを表示
  if (validation) validation.classList.add('visible');
}

/**
 * グローバルエラーメッセージを表示
 * 「必須項目をご入力ください」などのフォーム全体のエラーメッセージを表示します
 */
function showGlobalError() {
  const globalValidation = document.getElementById('global-validation');
  if (globalValidation) {
    globalValidation.classList.add('visible');
  }
}

/**
 * 最初のエラー要素までスクロール
 * エラーがある場合、そのエラー項目が画面内に見えるようにスクロールします
 */
function scrollToFirstError() {
  // 最初のエラー項目を取得
  const firstError = document.querySelector('.question.error');
  if (!firstError) return; // エラー項目がなければ何もしない
  
  // エラー項目まで滑らかにスクロール
  firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
  // 注目を集めるためにハイライト効果を追加
  firstError.classList.add('highlight');
  
  // 1.5秒後にハイライトを解除
  setTimeout(() => {
    firstError.classList.remove('highlight');
  }, 1500);
}

/**
 * FormDataオブジェクトを通常のオブジェクトに変換
 * FormDataはイテレータなので、通常のJSオブジェクトに変換すると扱いやすくなります
 * 
 * @param {FormData} formData - フォームデータ
 * @returns {Object} - 変換後のオブジェクト
 */
function formDataToObject(formData) {
  const dataObj = {};
  
  // FormDataの各エントリーに対して処理
  formData.forEach((val, key) => {
    // すでにそのキーが存在する場合（複数選択のチェックボックスなど）
    if (dataObj[key]) {
      // まだ配列になっていない場合は配列に変換
      if (!Array.isArray(dataObj[key])) {
        dataObj[key] = [dataObj[key]];
      }
      // 新しい値を配列に追加
      dataObj[key].push(val);
    } else {
      // 新しいキーの場合は通常の値として格納
      dataObj[key] = val;
    }
  });
  
  return dataObj;
}

/**
 * 口コミ用コメントを準備
 * 高評価の場合に表示される口コミリダイレクト画面用のコメントを設定します
 * 
 * @param {Object} dataObj - フォームデータオブジェクト
 */
function prepareReviewComment(dataObj) {
  let userComments = '';
  
  // 改善点・要望があれば追加
  if (dataObj.improvement) userComments += dataObj.improvement + ' ';
  // その他コメントがあれば追加
  if (dataObj.otherComments) userComments += dataObj.otherComments;
  
  // コメントをコピー用テキストエリアに設定
  const commentElement = document.getElementById('comment-to-copy');
  if (commentElement) {
    // 前後の空白を除去してセット
    commentElement.value = userComments.trim();
  }
}

/**
 * フォーム要素を非表示
 * 送信完了後、フォームとナビゲーションを非表示にします
 */
function hideFormElements() {
  const form = document.getElementById('surveyForm');
  const navContainer = document.querySelector('.nav-container');
  
  // フォームを非表示
  if (form) form.style.display = 'none';
  // ナビゲーションも非表示
  if (navContainer) navContainer.style.display = 'none';
}

/**
 * 評価に応じた結果画面を表示
 * 評価値に基づいて、適切な完了画面（サンクスページ）を表示します
 * 
 * @param {number} rating - 評価値（1-5）
 */
function showResult(rating) {
  // 高評価（4以上）の場合
  if (rating >= 4) {
    // 見出しテキストを評価に合わせてカスタマイズ
    const headingElement = document.querySelector('#review-redirect h2');
    if (headingElement) {
      headingElement.textContent = `星${rating}評価ありがとうございます！`;
    }
    
    // 口コミリダイレクト画面を表示
    const reviewRedirect = document.getElementById('review-redirect');
    if (reviewRedirect) {
      reviewRedirect.classList.remove('hidden');
      
    }
  } else {
    // 低・中評価（3以下）の場合は通常のサンクスページ
    const thankyou = document.getElementById('thankyou');
    if (thankyou) {
      thankyou.classList.remove('hidden');
     
    }
  }
}

/**
 * フォームデータをサーバーに送信
 * 収集したデータをGoogle Apps Scriptウェブアプリに送信します
 * 
 * @param {Object} dataObj - 送信するデータオブジェクト
 */
function submitFormData(dataObj) {
  try {
    // 設定ファイルからAPIのURLを取得
    const apiUrl = typeof CONFIG !== 'undefined' ? CONFIG.APPS_SCRIPT_WEBAPP_URL : '';
    if (!apiUrl) return; // URLがなければ処理中断
    
    // fetch APIを使ってPOSTリクエストを送信
    fetch(apiUrl, {
      method: 'POST', // HTTPメソッド
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded' // コンテンツタイプ
      },
      // URLSearchParamsを使ってデータをURLエンコード形式に変換
      body: new URLSearchParams(dataObj)
    })
    .then(res => res.json()) // レスポンスをJSONとして解析
    .then(result => {
      console.log('送信成功:', result);
      // サーバーからのレスポンスにエラーが含まれていた場合
      if (!result.success) {
        alert('エラーが発生しました: ' + result.error);
      }
    })
    .catch(err => {
      // ネットワークエラーやその他の例外が発生した場合
      console.error('送信エラー:', err);
      alert('送信中に問題が発生しました。もう一度お試しください。');
    });
  } catch (e) {
    // 予期せぬエラーの場合
    console.error('データ送信エラー:', e);
  }
}

window.updateValidationMessages = function () {
  const set = (sel, key) => {
    const el = document.querySelector(sel);
    if (el) el.textContent = i18next.t(key);
  };
  set('#store-validation span', 'validation.store');
  set('#rating-validation span', 'validation.rating');
  set('#global-validation span', 'validation.global');
};

// グローバルスコープに公開
// HTMLのonclick属性や他のJSファイルからこの関数を呼び出せるようにする
window.validateAndSubmit = validateAndSubmit;
</file>

<file path="css/layout-fix.css">
/* 
   QUARTERアンケート - レイアウト統一CSS
   
   このCSSは質問カードとフィードバック画面の一貫したスタイリングを確立し、
   モバイルとデスクトップの両方で統一されたデザインを提供します。
*/

/* ===== 基本コンテナの統一 ===== */
.container {
  max-width: 680px;
  margin: 0 auto;
  padding: var(--spacing-md) var(--spacing-xl);
  background-color: white;
  box-shadow: 0 0 30px rgba(0, 0, 0, 0.05);
}

/* ===== カードコンポーネントの統一 ===== */
/* 質問カードとフィードバックカードの共通スタイル */
.question, 
#thankyou, 
#review-redirect {
  /* 一貫したマージンと幅 */
  margin: 0 5% var(--spacing-xl);
  width: 90%;
  box-sizing: border-box;
  
  /* 一貫した視覚的スタイリング */
  background-color: white;
  box-shadow: 0 0 30px rgba(0, 0, 0, 0.05);
  border-top: 1px solid var(--border-color);
  border-left: 3px solid var(--primary-color);
  padding: var(--spacing-lg);
  position: relative;
}

/* アクティブな質問のハイライト */
.question.current {
  border-left: 3px solid var(--primary-color);
  transform: translateY(-3px);
}

/* 完了した質問のスタイリング */
.question.completed {
  border-left: 3px solid var(--secondary-color);
}

/* フィードバックカード特有のスタイル */
.feedback-card {
  /* display: blockを明示的に設定（hidden解除時に適切に表示されるため） */
  display: block;
  /* 幅と余白を明示的に再設定（詳細度を高めるため） */
  width: 96% !important;
  margin-left: 2% !important;
  margin-right: 2% !important;
}

/* hidden要素の統一 */
.hidden {
  display: none !important; /* 確実に非表示にするため */
}

/* フィードバックカードのテキスト配置 */
#thankyou, 
#review-redirect {
  text-align: center;
}

/* フィードバックカードの明示的な幅設定（詳細度を高めるため） */
.container #thankyou,
.container #review-redirect {
  width: 96% !important;
  margin-left: 2% !important;
  margin-right: 2% !important;
  box-sizing: border-box;
  background-color: white;
}

/* フィードバックカード表示時の幅確保（hiddenクラスが削除された後） */
#thankyou:not(.hidden), 
#review-redirect:not(.hidden) {
  display: block;
  width: 96% !important;
  margin-left: 2% !important;
  margin-right: 2% !important;
  box-sizing: border-box;
  background-color: white;
  padding: var(--spacing-lg);
}

/* ===== コピーコンテナとボタンの調整 ===== */
/* コピーコンテナのスタイリング */
.copy-container {
  width: 100%;
  margin: var(--spacing-lg) 0;
}

#comment-to-copy {
  width: 100%;
  box-sizing: border-box;
  margin-bottom: var(--spacing-md);
  background-color: white;
  min-height: 100px;
}

/* コピーヒントのスタイリング */
.copy-hint {
  color: var(--gray-700);
  font-size: 12px;
  margin-top: 4px;
  margin-bottom: 12px;
  text-align: left;
}

/* ボタンコンテナのレイアウト */
.copy-container div {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: var(--spacing-md);
  margin-top: var(--spacing-md);
}

/* ===== 送信ボタンのサイズ調整 ===== */
.submit-button {
  /* おしゃれなサイズ設定 */
  width: auto;
  min-width: 180px;
  max-width: 280px;
  padding: 12px 40px;
  font-size: 14px;
  letter-spacing: 1px;
}

.action-button {
  /* アクションボタンのサイズ調整 */
  width: auto;
  min-width: 160px;
  padding: var(--spacing-md) var(--spacing-lg);
}

/* ===== モバイル向け調整 ===== */
@media (max-width: 480px) {
  /* 星の間隔を狭く調整 */
  .star {
    padding: 0 2px; /* より狭い間隔に調整 */
    font-size: 36px; /* サイズも小さく調整 */
  }
  
  /* カードの余白調整 */
  .question, 
  #thankyou, 
  #review-redirect {
    margin-left: 2% !important; /* 左右マージンを統一 */
    margin-right: 2% !important;
    width: 96% !important; /* 幅を統一 */
    padding: var(--spacing-md); /* 内側パディングは小さく */
  }
  
  /* ボタンのモバイル調整 */
  .submit-button {
    width: 80%;
    max-width: 280px;
    margin: 0 auto var(--spacing-md);
  }
  
  /* コピーボタンコンテナの調整 */
  #review-redirect .copy-container div {
    flex-direction: column;
    align-items: center;
  }
  
  /* コピーボタンとリダイレクトボタンの調整 */
  #review-redirect .action-button {
    width: 100%;
    max-width: 240px;
    margin: var(--spacing-xs) 0;
  }
}

/* ===== タブレット向け調整 ===== */
@media (min-width: 481px) and (max-width: 768px) {
  /* カードの余白調整 */
  .question, 
  #thankyou, 
  #review-redirect {
    padding: var(--spacing-md) var(--spacing-lg);
  }
  
  /* ボタンのタブレット調整 */
  .submit-button {
    width: auto;
    min-width: 200px;
  }
}

/* ===== 全背景色を白に統一 ===== */
body, .container, #thankyou, #review-redirect, .question {
  background-color: white;
}

/* テキストエリアの背景色も統一 */
#comment-to-copy {
  background-color: white;
}
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>QUARTERアンケート</title>
  
  <!-- Google Fonts - 原版から復元 -->
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;500;700&family=Playfair+Display:wght@400;600&display=swap" rel="stylesheet">
  
  <!-- 既存 CSS -->
  <link rel="stylesheet" href="css/styles.css">
  <link rel="stylesheet" href="css/responsive.css">
  <link rel="stylesheet" href="css/layout-fix.css">
  <link rel="stylesheet" href="css/menu-styles.css">
  <link rel="stylesheet" href="css/accordion-style.css">

  <!-- i18next 本体 -->
  <script src="https://cdn.jsdelivr.net/npm/i18next@latest/dist/umd/i18next.min.js"></script>
  <!-- ブラウザ言語自動判定プラグイン -->
  <script src="https://cdn.jsdelivr.net/npm/i18next-browser-languagedetector@8.1.0/i18nextBrowserLanguageDetector.min.js"></script>

  <!-- ★ i18n 初期化 -->
  <script defer src="js/i18n.js"></script>

  <!-- 既存 JS（順序自由） -->
  <script defer src="js/config.js"></script>
  <script defer src="js/navigation.js"></script>
  <script defer src="js/star-rating.js"></script>
  <script defer src="js/dynamic-services.js"></script>
  <script defer src="js/validation.js"></script>
  <script defer src="js/scroll-monitor.js"></script>
  <script defer src="js/main.js"></script>
  <script defer src="js/menu-formatter.js"></script>
</head>
<body>
  <div class="container">
    <!-- ★ ヘッダー（言語セレクタを右上に配置） -->
    <header class="site-header-alt">
      <div class="language-selector-top-right">
        <a href="#" class="lang-link" data-lang="ja" onclick="changeLang('ja')">日本語</a>
        <span class="separator">|</span>
        <a href="#" class="lang-link" data-lang="en" onclick="changeLang('en')">English</a>
        <span class="separator">|</span>
        <a href="#" class="lang-link" data-lang="zh" onclick="changeLang('zh')">中文</a>
      </div>
      
      <div class="logo-container">
        <img class="text-logo" src="./images/quarter-logo.png" alt="QUARTERロゴ" style="max-width: 200px; height: auto;">
      </div>
    </header>

    <!-- ナビゲーションバー - 原版の構造を復元 -->
    <div class="nav-container">
      <div class="progress-nav">
        <div class="nav-item active" data-section="store">
          <span class="nav-text" data-i18n="nav.store"></span>
          <div class="nav-indicator"></div>
        </div>
        <div class="nav-item" data-section="rating">
          <span class="nav-text" data-i18n="nav.rating"></span>
          <div class="nav-indicator"></div>
        </div>
        <div class="nav-item" data-section="info">
          <span class="nav-text" data-i18n="nav.info"></span>
          <div class="nav-indicator"></div>
        </div>
        <div class="nav-item" data-section="service">
          <span class="nav-text" data-i18n="nav.service"></span>
          <div class="nav-indicator"></div>
        </div>
        <div class="nav-item" data-section="feedback">
          <span class="nav-text" data-i18n="nav.feedback"></span>
          <div class="nav-indicator"></div>
        </div>
      </div>
    </div>

    <!-- アンケートフォーム -->
    <form id="surveyForm" novalidate>
      <!-- Q1. 店舗選択（必須） -->
      <div class="question required current" id="question1" data-section="store">
        <h3 data-i18n="q1.title"></h3>
        <div class="options">
          <input type="radio" id="quarter" name="store" value="QUARTER" required>
          <label for="quarter">QUARTER</label>
          
          <input type="radio" id="quarter-resort" name="store" value="QUARTER RESORT">
          <label for="quarter-resort">QUARTER RESORT</label>
          
          <input type="radio" id="quarter-seasons" name="store" value="QUARTER SEASONS">
          <label for="quarter-seasons">QUARTER SEASONS</label>
          
          <input type="radio" id="link" name="store" value="LINK">
          <label for="link">LINK</label>
          
          <input type="radio" id="il" name="store" value="iL">
          <label for="il">iL</label>
        </div>
        
        <div class="validation-message" id="store-validation">
          <span data-i18n="validation.store"></span>
        </div>
      </div>
      
      <!-- Q2. 総合評価（必須） -->
      <div class="question required" id="question2" data-section="rating">
        <h3 data-i18n="q2.title"></h3>
        
        <div class="star-rating-container">
          <div class="stars-row" id="starsContainer">
            <span class="star" data-value="1">★</span>
            <span class="star" data-value="2">★</span>
            <span class="star" data-value="3">★</span>
            <span class="star" data-value="4">★</span>
            <span class="star" data-value="5">★</span>
          </div>
          
          <div class="rating-score" id="ratingScore">
            <span data-i18n="rating.prefix"></span> <span id="scoreValue">0</span>/5
          </div>
        </div>
        
        <div class="star-rating-hidden">
          <input type="radio" id="star5" name="rating" value="5" required>
          <input type="radio" id="star4" name="rating" value="4">
          <input type="radio" id="star3" name="rating" value="3">
          <input type="radio" id="star2" name="rating" value="2">
          <input type="radio" id="star1" name="rating" value="1">
        </div>

        <div class="validation-message" id="rating-validation">
          <span data-i18n="validation.rating"></span>
        </div>
      </div>
      
      <!-- 任意質問セクション - 復元 -->
      <div class="optional-questions">
        <p class="optional-note" data-i18n="optional.note"></p>
        
        <!-- Q3. お名前（任意） -->
        <div class="question" id="question3" data-section="info">
          <h3 data-i18n="q3.title"></h3>
          <textarea name="name" rows="1" data-i18n-placeholder="q3.placeholder"></textarea>
        </div>
        
        <!-- Q4. 来店タイプ（任意） -->
        <div class="question" id="question4" data-section="info">
          <h3 data-i18n="q4.title"></h3>
          <div class="options">
            <input type="radio" id="first-time" name="visitType" value="初めて（新規）">
            <label for="first-time" data-i18n="q4.firstTime"></label>
            
            <input type="radio" id="repeat" name="visitType" value="2回目以降（常連）">
            <label for="repeat" data-i18n="q4.repeat"></label>
          </div>
        </div>
        
        <!-- Q5. 性別（任意） -->
        <div class="question" id="question5" data-section="info">
          <h3 data-i18n="q5.title"></h3>
          <div class="options">
            <input type="radio" id="male" name="gender" value="男性">
            <label for="male" data-i18n="q5.male"></label>
            
            <input type="radio" id="female" name="gender" value="女性">
            <label for="female" data-i18n="q5.female"></label>
            
            <input type="radio" id="other" name="gender" value="その他">
            <label for="other" data-i18n="q5.other"></label>
          </div>
        </div>
        
        <!-- Q6. 年齢（任意） -->
        <div class="question" id="question6" data-section="info">
          <h3 data-i18n="q6.title"></h3>
          <div class="options">
            <input type="radio" id="age10s" name="age" value="10代">
            <label for="age10s" data-i18n="q6.age10s"></label>
            
            <input type="radio" id="age20s" name="age" value="20代">
            <label for="age20s" data-i18n="q6.age20s"></label>
            
            <input type="radio" id="age30s" name="age" value="30代">
            <label for="age30s" data-i18n="q6.age30s"></label>
            
            <input type="radio" id="age40s" name="age" value="40代">
            <label for="age40s" data-i18n="q6.age40s"></label>
            
            <input type="radio" id="age50s" name="age" value="50代">
            <label for="age50s" data-i18n="q6.age50s"></label>
            
            <input type="radio" id="age60plus" name="age" value="60代以上">
            <label for="age60plus" data-i18n="q6.age60plus"></label>
          </div>
        </div>
        
        <!-- Q7. 利用サービス（複数選択可） -->
        <div class="question" id="question7" data-section="service">
          <h3 data-i18n="q7.title"></h3>
            
          <!-- 通常店舗用のメニュー（デフォルト表示） -->
          <div class="options" id="standard-services">
            <input type="checkbox" id="cut" name="services" value="カット">
            <label for="cut" data-i18n="q7.cut"></label>
            
            <input type="checkbox" id="color" name="services" value="カラー">
            <label for="color" data-i18n="q7.color"></label>
            
            <input type="checkbox" id="perm" name="services" value="パーマ">
            <label for="perm" data-i18n="q7.perm"></label>
            
            <input type="checkbox" id="treatment" name="services" value="トリートメント">
            <label for="treatment" data-i18n="q7.treatment"></label>
            
            <input type="checkbox" id="headspa" name="services" value="ヘッドスパ">
            <label for="headspa" data-i18n="q7.headspa"></label>
            
            <input type="checkbox" id="other-service" name="services" value="その他">
            <label for="other-service" data-i18n="q7.other"></label>
          </div>
          
          <!-- iL店舗用のメニュー（初期状態では非表示） -->
          <div class="options" id="il-services" style="display: none;">
            <input type="checkbox" id="il-eyelash-ext" name="services" value="まつ毛エクステ">
            <label for="il-eyelash-ext" data-i18n="q7.il.eyelashExt"></label>
            
            <input type="checkbox" id="il-eyelash-perm" name="services" value="まつ毛パーマ">
            <label for="il-eyelash-perm" data-i18n="q7.il.eyelashPerm"></label>
            
            <input type="checkbox" id="il-wax" name="services" value="WAXメニュー">
            <label for="il-wax" data-i18n="q7.il.wax"></label>
            
            <input type="checkbox" id="il-other" name="services" value="その他メニュー">
            <label for="il-other" data-i18n="q7.il.other"></label>
          </div>
        </div>
          
        <!-- Q8. サービス満足度 -->
        <div class="question" id="question8" data-section="service">
          <h3 data-i18n="q8.title"></h3>
          <div class="options">
            <input type="radio" id="service5" name="serviceSatisfaction" value="非常に満足">
            <label for="service5" data-i18n="q8.veryGood"></label>
            
            <input type="radio" id="service4" name="serviceSatisfaction" value="満足">
            <label for="service4" data-i18n="q8.good"></label>
            
            <input type="radio" id="service3" name="serviceSatisfaction" value="普通">
            <label for="service3" data-i18n="q8.normal"></label>
            
            <input type="radio" id="service2" name="serviceSatisfaction" value="不満">
            <label for="service2" data-i18n="q8.bad"></label>
            
            <input type="radio" id="service1" name="serviceSatisfaction" value="非常に不満">
            <label for="service1" data-i18n="q8.veryBad"></label>
          </div>
        </div>
        
        <!-- Q9. スタッフ対応 -->
        <div class="question" id="question9" data-section="service">
          <h3 data-i18n="q9.title"></h3>
          <div class="options">
            <input type="radio" id="staff5" name="staffResponse" value="非常に良い">
            <label for="staff5" data-i18n="q9.veryGood"></label>
            
            <input type="radio" id="staff4" name="staffResponse" value="良い">
            <label for="staff4" data-i18n="q9.good"></label>
            
            <input type="radio" id="staff3" name="staffResponse" value="普通">
            <label for="staff3" data-i18n="q9.normal"></label>
            
            <input type="radio" id="staff2" name="staffResponse" value="悪い">
            <label for="staff2" data-i18n="q9.bad"></label>
            
            <input type="radio" id="staff1" name="staffResponse" value="非常に悪い">
            <label for="staff1" data-i18n="q9.veryBad"></label>
          </div>
        </div>
        
        <!-- Q10. 待ち時間 -->
        <div class="question" id="question10" data-section="service">
          <h3 data-i18n="q10.title"></h3>
          <div class="options">
            <input type="radio" id="wait5" name="waitTime" value="非常に満足">
            <label for="wait5" data-i18n="q10.veryGood"></label>
            
            <input type="radio" id="wait4" name="waitTime" value="満足">
            <label for="wait4" data-i18n="q10.good"></label>
            
            <input type="radio" id="wait3" name="waitTime" value="普通">
            <label for="wait3" data-i18n="q10.normal"></label>
            
            <input type="radio" id="wait2" name="waitTime" value="不満">
            <label for="wait2" data-i18n="q10.bad"></label>
            
            <input type="radio" id="wait1" name="waitTime" value="非常に不満">
            <label for="wait1" data-i18n="q10.veryBad"></label>
          </div>
        </div>
        
        <!-- Q11. 店内清潔感 -->
        <div class="question" id="question11" data-section="service">
          <h3 data-i18n="q11.title"></h3>
          <div class="options">
            <input type="radio" id="clean5" name="cleanliness" value="非常に清潔">
            <label for="clean5" data-i18n="q11.veryGood"></label>
            
            <input type="radio" id="clean4" name="cleanliness" value="清潔">
            <label for="clean4" data-i18n="q11.good"></label>
            
            <input type="radio" id="clean3" name="cleanliness" value="普通">
            <label for="clean3" data-i18n="q11.normal"></label>
            
            <input type="radio" id="clean2" name="cleanliness" value="不清潔">
            <label for="clean2" data-i18n="q11.bad"></label>
            
            <input type="radio" id="clean1" name="cleanliness" value="非常に不清潔">
            <label for="clean1" data-i18n="q11.veryBad"></label>
          </div>
        </div>
        
        <!-- Q12. 改善点・要望 -->
        <div class="question" id="question12" data-section="feedback">
          <h3 data-i18n="q12.title"></h3>
          <textarea name="improvement" rows="3" data-i18n-placeholder="q12.placeholder"></textarea>
        </div>
        
        <!-- Q13. その他感想 -->
        <div class="question" id="question13" data-section="feedback">
          <h3 data-i18n="q13.title"></h3>
          <textarea name="otherComments" rows="3" data-i18n-placeholder="q13.placeholder"></textarea>
        </div>
      </div>

     <!-- Q14. 追加希望サービス -->
<div class="question" id="question14" data-section="feedback">
  <h3 data-i18n="q14.title"></h3>
  <p class="optional-note" data-i18n="optional.note"></p>
  <div class="collapsible-group">
    <!-- ヘアケア特化メニュー -->
    <details>
      <summary data-i18n="q14.grp.haircare"></summary>
      <div class="options">
        <input type="checkbox" id="wish-treat" name="wishServices" value="髪質改善トリートメント">
        <label for="wish-treat" data-i18n="q14.treat"></label>
        
        <input type="checkbox" id="wish-organic" name="wishServices" value="オーガニックカラー">
        <label for="wish-organic" data-i18n="q14.organicColor"></label>
        
        <input type="checkbox" id="wish-scalp" name="wishServices" value="スキャルプケア">
        <label for="wish-scalp" data-i18n="q14.scalp"></label>
      </div>
    </details>

    <!-- トレンドヘアスタイル技術 -->
    <details>
      <summary data-i18n="q14.grp.trend"></summary>
      <div class="options">
        <input type="checkbox" id="wish-inner" name="wishServices" value="インナーカラー">
        <label for="wish-inner" data-i18n="q14.innerColor"></label>
        
        <input type="checkbox" id="wish-balayage" name="wishServices" value="バレイヤージュ">
        <label for="wish-balayage" data-i18n="q14.balayage"></label>
        
        <input type="checkbox" id="wish-extension" name="wishServices" value="ヘアエクステンション">
        <label for="wish-extension" data-i18n="q14.extension"></label>
        
        <input type="checkbox" id="wish-korean" name="wishServices" value="韓国風ヘアセット">
        <label for="wish-korean" data-i18n="q14.koreanSet"></label>
      </div>
    </details>

    <!-- エステ・美容関連 -->
    <details>
      <summary data-i18n="q14.grp.beauty"></summary>
      <div class="options">
        <input type="checkbox" id="wish-lash" name="wishServices" value="まつげパーマ">
        <label for="wish-lash" data-i18n="q14.lashPerm"></label>
        
        <input type="checkbox" id="wish-eyebrow" name="wishServices" value="アイブロウデザイン">
        <label for="wish-eyebrow" data-i18n="q14.eyebrow"></label>
        
        <input type="checkbox" id="wish-facial" name="wishServices" value="フェイシャルエステ">
        <label for="wish-facial" data-i18n="q14.facial"></label>
      </div>
    </details>

    <!-- 男性向け特化メニュー -->
    <details>
      <summary data-i18n="q14.grp.men"></summary>
      <div class="options">
        <input type="checkbox" id="wish-mens-shave" name="wishServices" value="メンズヒゲケア">
        <label for="wish-mens-shave" data-i18n="q14.mensShave"></label>
        
        <input type="checkbox" id="wish-mens-scalp" name="wishServices" value="メンズスキャルプ">
        <label for="wish-mens-scalp" data-i18n="q14.mensScalp"></label>
        
        <input type="checkbox" id="wish-mens-make" name="wishServices" value="メンズメイク">
        <label for="wish-mens-make" data-i18n="q14.mensMake"></label>
        
        <input type="checkbox" id="wish-mens-facial" name="wishServices" value="男性向けフェイシャルケア">
        <label for="wish-mens-facial" data-i18n="q14.mensFacial"></label>
        
        <input type="checkbox" id="wish-mens-lesson" name="wishServices" value="ビジネスマン向けヘアセット講座">
        <label for="wish-mens-lesson" data-i18n="q14.mensLesson"></label>
      </div>
    </details>

    <!-- 特別パッケージ・会員制度 -->
    <details>
      <summary data-i18n="q14.grp.package"></summary>
      <div class="options">
        <input type="checkbox" id="wish-bridal" name="wishServices" value="ブライダル総合プラン">
        <label for="wish-bridal" data-i18n="q14.bridal"></label>
        
        <input type="checkbox" id="wish-season" name="wishServices" value="季節限定ケア">
        <label for="wish-season" data-i18n="q14.season"></label>
        
        <input type="checkbox" id="wish-family" name="wishServices" value="ファミリープラン">
        <label for="wish-family" data-i18n="q14.family"></label>
        
        <input type="checkbox" id="wish-subscription" name="wishServices" value="月額定額制ヘアケア">
        <label for="wish-subscription" data-i18n="q14.subscription"></label>
      </div>
    </details>

    <!-- デジタル活用サービス -->
    <details>
      <summary data-i18n="q14.grp.digital"></summary>
      <div class="options">
        <input type="checkbox" id="wish-ai" name="wishServices" value="AIヘアスタイルシミュレーション">
        <label for="wish-ai" data-i18n="q14.aiSim"></label>
        
        <input type="checkbox" id="wish-online" name="wishServices" value="オンラインヘア相談">
        <label for="wish-online" data-i18n="q14.onlineConsult"></label>
        
        <input type="checkbox" id="wish-app" name="wishServices" value="ヘアケアアプリ連動サービス">
        <label for="wish-app" data-i18n="q14.app"></label>
      </div>
    </details>
  </div><!-- /.collapsible-group -->
</div><!-- /#question14 -->


      <!-- グローバルバリデーションメッセージ -->
      <div class="validation-message" id="global-validation" style="text-align: center; margin-bottom: var(--spacing-md);">
        <span data-i18n="validation.global"></span>
      </div>
      
      <!-- 送信ボタン -->
      <div class="submit-container">
        <button type="button" id="submitButton" class="submit-button" data-i18n="submit"></button>
      </div>
    </form>

    <!-- 星3以下用のメッセージ -->
    <div id="thankyou" class="question feedback-card hidden" data-section="feedback">
      <h2 data-i18n="thankyou.title"></h2>
      <p data-i18n="thankyou.low"></p>
    </div>

    <!-- 星4以上用の口コミ促進メッセージ -->
    <div id="review-redirect" class="question feedback-card hidden" data-section="feedback">
      <h2 data-i18n="thankyou.high"></h2>
      <p data-i18n="thankyou.high.text1"></p>
      <p data-i18n="thankyou.high.text2"></p>
      <p data-i18n="thankyou.high.text3"></p>
      
      <div class="copy-container">
        <textarea id="comment-to-copy" readonly></textarea>
        <p class="copy-hint" data-i18n="thankyou.copy.hint"></p>
        <div>
          <button id="copy-button" class="action-button" onclick="copyComment()" data-i18n="thankyou.copy.button"></button>
          <button id="redirect-button" class="action-button" onclick="redirectToGoogleMaps()" data-i18n="thankyou.redirect.button"></button>
        </div>
      </div>
      
      <p data-i18n="thankyou.high.text4"></p>
    </div>
  </div>
</body>
</html>
</file>

<file path="css/styles.css">
/* ============================================
   QUARTERアンケートのスタイル
   このスタイルシートは、ゴールド/ベージュのカラースキームと
   エレガントなデザインを持つアンケートフォームの見た目を定義します
   ============================================ */

/* ----------------------------------------
   リセット + 変数定義
   すべての要素の余白をリセットし、サイト全体で使用する色やサイズなどの変数を定義します
   ---------------------------------------- */
   * {
    margin: 0;            /* すべての要素の外側の余白をゼロにリセット */
    padding: 0;           /* すべての要素の内側の余白をゼロにリセット */
    box-sizing: border-box; /* パディングを追加しても要素の幅が増えないようにする設定 */
  }
  
  :root {
    /* カラーパレット - サイト全体で統一して使用する色の定義 */
    --primary-color: #C39000;      /* リッチゴールド - メインのブランドカラー */
    --primary-light: rgba(195, 144, 0, 0.08); /* 半透明ゴールド - 微妙なハイライト用 */
    --secondary-color: #9F8C55;    /* マットゴールド - セカンダリーアクセント */
    --accent-color: #D0A900;       /* ゴールド - 重要な要素やハイライト用 */
    --danger-color: #EA4335;       /* エラー色 - バリデーションエラーなどに使用 */
    --background-color: #F9F6F0;   /* 淡いベージュ - ページの背景色 */
    --text-color: #333333;         /* 文字色 - メインテキストの色 */
    --border-color: #E6D8B3;       /* シャンパンベージュ - 境界線の色 */
    
    /* グレースケール - UI要素用の一貫したグレーの値 */
    --gray-100: #f8f9fa; /* 最も明るいグレー - 背景用 */
    --gray-200: #f1f3f4; /* 明るいグレー - わずかな強調用 */
    --gray-300: #e0e0e0; /* 中明度のグレー - 無効化された要素用 */
    --gray-400: #bdc1c6; /* 中間のグレー - 境界線用 */
    --gray-700: #5f6368; /* 暗いグレー - 二次的なテキスト用 */
    --gray-900: #333333; /* 最も暗いグレー - 主要なテキスト用 */
    
    /* シャドウ - 奥行きを表現するための一貫した影のスタイル */
    --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.05); /* 微妙な影 - 小さな要素用 */
    --shadow-md: 0 2px 5px rgba(0, 0, 0, 0.08); /* 中程度の影 - インタラクティブな要素用 */
    --shadow-lg: 0 4px 12px rgba(0, 0, 0, 0.1); /* 大きな影 - 目立つ要素用 */
    
    /* 角丸 - 一貫した角の丸みの値（このデザインでは角丸を使用していません） */
    --radius-sm: 0px; /* 角丸なし - このデザインでは直角の角を意図しています */
    --radius-md: 0px;
    --radius-lg: 0px;
    
    /* スペーシング - 一貫した間隔のスケール */
    --spacing-xs: 4px;  /* 超小さい間隔 */
    --spacing-sm: 8px;  /* 小さい間隔 - 狭いスペースの要素用 */
    --spacing-md: 16px; /* 中間の間隔 - ほとんどの要素用 */
    --spacing-lg: 24px; /* 大きい間隔 - セクション間の分離用 */
    --spacing-xl: 32px; /* 超大きい間隔 - 主要なセクション用 */
    
    /* フォント - タイポグラフィの定義 */
    --heading-font: 'Playfair Display', serif; /* エレガントなセリフフォント - 見出し用 */
    --body-font: 'Noto Sans JP', sans-serif;   /* クリーンなサンセリフフォント - 本文用（日本語対応） */
  }
  
  /* ----------------------------------------
     全体レイアウト
     ページの主要な構造とコンテナを制御します
     ---------------------------------------- */
  body {
    font-family: var(--body-font); /* すべてのテキストに本文フォントを適用 */
    background-color: var(--background-color); /* 明るいベージュの背景 */
    color: var(--text-color); /* デフォルトのテキスト色 */
    line-height: 1.6; /* 行間を広げて読みやすさを向上 */
    padding-bottom: 100px; /* ページの下部にスペースを確保 */
  }
  
  .container {
    max-width: 680px; /* 読みやすさのために幅を制限 */
    margin: 0 auto; /* コンテナを中央揃え */
    padding: var(--spacing-md) var(--spacing-xl); /* 内側の余白 */
    background-color: white; /* コンテンツエリアの背景を白に */
    box-shadow: 0 0 30px rgba(0, 0, 0, 0.05); /* 微妙な影で奥行きを表現 */
  }
  
  /* ----------------------------------------
     ヘッダー
     ロゴがある上部セクションのスタイル
     ---------------------------------------- */
  header {
    text-align: center; /* ヘッダーコンテンツを中央揃え */
    margin-bottom: var(--spacing-xl); /* ヘッダーの下にスペース */
    padding-top: var(--spacing-lg); /* ヘッダーの上にスペース */
    border-bottom: 1px solid var(--border-color); /* 微妙な区切り線 */
    padding-bottom: var(--spacing-lg); /* 区切り線の下にスペース */
  }
  
  .text-logo {
    font-family: var(--heading-font); /* ロゴに見出しフォントを適用 */
    font-size: 32px; /* 目立つように大きなサイズ */
    font-weight: 700; /* 太字 */
    color: var(--text-color); /* テキスト色に合わせる */
    letter-spacing: 3px; /* 文字間隔を広げてエレガントに */
    margin-bottom: var(--spacing-md); /* ロゴの下にスペース */
  }
  
  /* ----------------------------------------
     ナビゲーションバー
     進行状況を示すスティッキーナビゲーション
     ---------------------------------------- */
  .nav-container {
    position: sticky; /* スクロール時に上部に固定 */
    top: 0; /* ビューポートの上部に配置 */
    z-index: 100; /* 他のコンテンツの上に表示されるようにする */
    width: 100%; /* 全幅 */
    background-color: white; /* 白い背景 */
    padding: 0; /* パディングなし */
    margin: 0 auto var(--spacing-lg); /* 中央揃えし、下部にスペース */
    max-width: 600px; /* 最大幅 */
    border-bottom: 1px solid var(--border-color); /* 下部の境界線 */
  }
  
  .progress-nav {
    display: flex; /* 水平レイアウト */
    justify-content: space-between; /* アイテムを均等に配置 */
    align-items: center; /* アイテムを垂直方向に中央揃え */
    width: 100%; /* 全幅 */
    padding: 0; /* パディングなし */
    background-color: white; /* 白い背景 */
    border-radius: 0; /* 角丸なし */
    box-shadow: none; /* 影なし */
    border: none; /* 境界線なし */
  }
  
  .nav-item {
    flex: 1; /* 各アイテムが等しいスペースを取る */
    text-align: center; /* テキストを中央揃え */
    position: relative; /* インジケーターの配置用 */
    padding: 15px 0; /* 垂直方向のパディングのみ */
    cursor: pointer; /* クリック可能を示す */
    transition: all 0.3s ease; /* ホバー効果のスムーズな遷移 */
    user-select: none; /* テキスト選択を防止 */
    -webkit-tap-highlight-color: rgba(0,0,0,0); /* モバイルでのタップハイライトを削除 */
    min-height: 44px; /* アクセシビリティのための最小タッチターゲットサイズ */
    display: flex; /* フレックスボックスを使用した配置 */
    flex-direction: column; /* 子要素を垂直に積み重ねる */
    justify-content: center; /* 垂直方向に中央揃え */
    align-items: center; /* 水平方向に中央揃え */
  }
  
  .nav-text {
    font-size: 14px; /* 小さめのテキストサイズ */
    font-weight: 400; /* 通常の太さ */
    color: var(--text-color); /* テキスト色に合わせる */
    transition: color 0.3s ease; /* 色の変化をスムーズに */
    letter-spacing: 0.5px; /* わずかな文字間隔 */
  }
  
  .nav-item.active .nav-text {
    color: var(--primary-color); /* アクティブなアイテムはゴールド色 */
    font-weight: 500; /* やや太く */
  }
  
  .nav-indicator {
    position: absolute; /* 絶対位置 */
    bottom: 0; /* コンテナの下部に */
    left: 50%; /* 水平方向に中央 */
    transform: translateX(-50%); /* 中央調整 */
    width: 0; /* デフォルトでは幅なし */
    height: 2px; /* 下線の高さ */
    background-color: var(--primary-color); /* ゴールドのインジケーター */
    transition: width 0.3s ease; /* 幅の変化をアニメーション */
  }
  
  .nav-item.active .nav-indicator {
    width: 60%; /* アクティブ時の幅 */
  }
  
  .nav-item:active {
    background-color: rgba(195, 144, 0, 0.1); /* 押下時の薄いゴールド背景 */
  }
  
  /* ----------------------------------------
     質問カード
     個々の質問を含むコンテナ
     ---------------------------------------- */
  .question {
    margin: 0 5% var(--spacing-xl); /* 左右の余白と下部余白 */
    background-color: white; /* 白い背景 */
    padding: var(--spacing-lg); /* 内側の余白 */
    border-radius: 0; /* 角丸なし */
    box-shadow: 0 0 30px rgba(0, 0, 0, 0.05); /* 微妙な影で奥行きを表現 */
    transition: transform 0.3s ease, box-shadow 0.3s ease; /* スムーズな遷移 */
    border-top: 1px solid var(--border-color); /* 上部の境界線 */
    border-left: 1px solid var(--border-color); /* 左側の境界線 */
    position: relative; /* 内部要素の配置用 */
  }
  
  .question.current {
    border-left: 3px solid var(--primary-color); /* 現在の質問は太い左境界線 */
    transform: translateY(-3px); /* 強調のために少し持ち上げる */
    box-shadow: 0 0 30px rgba(0, 0, 0, 0.05); /* 微妙な影で奥行きを表現 */
  }
  
  .question.completed {
    border-left: 3px solid var(--secondary-color); /* 完了した質問は別の色 */
  }
  
  .options {
    margin: 0 5%; /* 左右の余白 */
  }
  
  h3 {
    font-family: var(--body-font); /* 質問テキストに本文フォントを使用 */
    font-size: 16px; /* 適度なサイズ */
    margin-bottom: var(--spacing-md); /* 下部にスペース */
    font-weight: 500; /* 中程度の太さ */
    color: var(--text-color); /* テキスト色 */
    padding-bottom: 10px; /* テキストの下にスペース */
    border-bottom: 1px solid rgba(230, 216, 179, 0.5); /* 微妙な下部セパレーター */
  }
  
  /* ----------------------------------------
     フォーム要素（ラジオ、チェックボックス）
     カスタムスタイルのラジオボタンとチェックボックス
     ---------------------------------------- */
  .options label {
    display: flex;          /* フレックスボックスを使用 */
    flex-direction: column; /* 縦方向に配置 */
    padding: var(--spacing-md); /* 内側の余白 */
    margin-bottom: var(--spacing-lg); /* オプション間のスペース */
    background-color: white; /* 白い背景 */
    border: 1px solid var(--border-color); /* 境界線 */
    border-radius: 0; /* 角丸なし */
    cursor: pointer; /* クリック可能を示す */
    transition: all 0.3s ease; /* スムーズな遷移 */
    font-size: 15px; /* テキストサイズ */
    position: relative; /* 内部要素の配置用 */
    overflow: hidden; /* 内部要素を含める */
    border-left: 3px solid transparent; /* ホバー効果用の透明な左境界線 */
    line-height: 1.4;      /* 行間を適切に設定 */
    gap: 6px;              /* メニュー名と説明の間隔 */
    word-break: break-word; /* 長い単語を適切に改行 */
    hyphens: auto;         /* ハイフネーションを有効に */
  }
  
  /* 選択された項目のスタイル強化 */
  .options input[type="radio"]:checked + label,
  .options input[type="checkbox"]:checked + label {
    background-color: rgba(230, 216, 179, 0.15); /* より明確な背景色 */
    border-color: var(--border-color); /* 境界線の色 */
    border-left: 2px solid var(--primary-color); /* ゴールドの左境界線 */
    box-shadow: var(--shadow-md); /* 奥行き用の影 */
    font-weight: 500; /* 中程度の太さ */
    transform: translateX(5px); /* 選択時に右へシフト */
  }
  
  /* 区切り文字の前での改行を促進 */
  .options label::after {
    content: "";
    display: block;
    width: 100%;
    height: 0;
  }
  
  .options input[type="radio"],
  .options input[type="checkbox"] {
    opacity: 0; /* デフォルトの入力を非表示 */
    position: absolute; /* フローから削除 */
    width: 1px; /* ほぼゼロサイズ */
    height: 1px; /* ほぼゼロサイズ */
    overflow: hidden; /* オーバーフローを非表示 */
  }
  
  .options label:hover {
    background-color: rgba(230, 216, 179, 0.1); /* ホバー時の背景 */
    transform: translateX(3px); /* わずかに右へシフト */
    box-shadow: var(--shadow-md); /* 影を追加 */
  }
  
  .options input[type="radio"]:checked + label::after,
  .options input[type="checkbox"]:checked + label::after {
    content: "✓"; /* チェックマーク */
    position: absolute; /* 絶対位置 */
    right: var(--spacing-md); /* 右揃え */
    color: var(--primary-color); /* ゴールド色 */
    font-weight: bold; /* 太字 */
  }

  /* アコーディオンのメニュー項目特有のスタイル */
  .collapsible-group .options label {
    padding: 10px 12px; /* 内側の余白を適切に */
    margin-bottom: 8px; /* 下部のマージン */
    font-size: 14px;
    line-height: 1.5;
  }
  
  /* ----------------------------------------
     星評価
     インタラクティブな星評価コンポーネント
     ---------------------------------------- */
  .star-rating-container {
    display: flex; /* フレックスボックスレイアウト */
    flex-direction: column; /* 垂直に積み重ねる */
    align-items: center; /* 水平方向に中央揃え */
    margin: var(--spacing-xl) 0; /* 垂直方向のマージン */
  }
  
  .stars-row {
    display: flex; /* 水平レイアウト */
    justify-content: center; /* 水平方向に中央揃え */
    margin-bottom: var(--spacing-md); /* 下部にスペース */
  }
  
  .star {
    font-size: 42px; /* 大きな星 */
    cursor: pointer; /* クリック可能 */
    color: var(--gray-300); /* 非アクティブ時はグレー */
    transition: all 0.2s ease; /* スムーズな遷移 */
    user-select: none; /* テキスト選択を防止 */
    padding: 0 var(--spacing-sm); /* より大きなタッチ領域のための水平パディング */
    transform-origin: center; /* 中心から変形 */
  }
  
  .star:hover {
    transform: scale(1.1); /* ホバー時に拡大 */
  }
  
  .star.active {
    color: var(--accent-color); /* アクティブ時はゴールド */
  }
  
  .star-rating-hidden {
    position: absolute; /* 絶対位置 */
    opacity: 0; /* 非表示 */
    pointer-events: none; /* インタラクションなし */
    width: 1px; /* ほぼゼロサイズ */
    height: 1px; /* ほぼゼロサイズ */
    overflow: hidden; /* オーバーフローを非表示 */
  }
  
  .rating-score {
    font-size: 16px; /* テキストサイズ */
    font-weight: 500; /* 中程度の太さ */
    color: var(--text-color); /* テキスト色 */
    margin: var(--spacing-sm) 0; /* 垂直方向のマージン */
    opacity: 0; /* デフォルトでは非表示 */
    transition: opacity 0.3s ease; /* フェードイン遷移 */
    text-align: center; /* テキストを中央揃え */
  }
  
  .rating-score.visible {
    opacity: 1; /* クラス適用時に表示 */
  }
  
  .low-rating-warning {
    width: 100%; /* 全幅 */
    max-width: 400px; /* 最大幅 */
    margin: var(--spacing-md) auto 0; /* 上部マージンで中央揃え */
    padding: var(--spacing-sm) var(--spacing-md); /* 内側の余白 */
    background-color: #fef7e0; /* 薄い黄色の背景 */
    border-left: 3px solid var(--accent-color); /* ゴールドの左境界線 */
    color: var(--text-color); /* テキスト色 */
    font-size: 14px; /* 小さめのテキスト */
    display: none; /* デフォルトでは非表示 */
    border-radius: 0; /* 角丸なし */
    text-align: center; /* テキストを中央揃え */
    animation: fadeIn 0.3s ease; /* フェードインアニメーション */
  }
  
  .low-rating-warning.visible {
    display: block; /* クラス適用時に表示 */
  }
  
  .star.pulse {
    animation: pulse 0.3s ease; /* パルスアニメーション */
  }
  
  /* ----------------------------------------
     テキストエリア
     テキスト入力領域のスタイリング
     ---------------------------------------- */
  textarea {
    width: 100%; /* 全幅 */
    padding: var(--spacing-md); /* 内側のパディング */
    border: 1px solid var(--border-color); /* 境界線 */
    border-radius: 0; /* 角丸なし */
    resize: vertical; /* 垂直方向のリサイズのみ許可 */
    font-family: var(--body-font); /* 本文フォントに合わせる */
    font-size: 15px; /* テキストサイズ */
    transition: border-color 0.3s ease, box-shadow 0.3s ease; /* スムーズな遷移 */
  }
  
  textarea:focus {
    border-color: var(--primary-color); /* フォーカス時はゴールドの境界線 */
    box-shadow: 0 0 0 2px rgba(195, 144, 0, 0.1); /* 微妙な輝き効果 */
    outline: none; /* デフォルトのアウトラインを削除 */
  }
  
  /* ----------------------------------------
     送信ボタン
     主要なアクションボタンのスタイリング
     ---------------------------------------- */
  .submit-container {
    text-align: center; /* 中央揃え */
    margin: var(--spacing-xl) 6% 0; /* マージン */
    position: relative; /* 内部要素の配置用 */
  }
  
  .submit-button {
    background: linear-gradient(135deg, #D0A900 0%, #C39000 100%); /* ゴールドのグラデーション */
    color: white; /* 白いテキスト */
    border: none; /* 境界線なし */
    padding: 12px 40px; /* 内側のパディング */
    font-size: 14px; /* テキストサイズ */
    font-weight: 500; /* 中程度の太さ */
    border-radius: 2px; /* わずかな角丸 */
    cursor: pointer; /* クリック可能 */
    transition: all 0.3s ease; /* スムーズな遷移 */
    box-shadow: 0 3px 10px rgba(195, 144, 0, 0.2); /* ゴールドの影 */
    letter-spacing: 1px; /* 文字間隔 */
    text-transform: uppercase; /* 大文字 */
  }
  
  .submit-button:hover {
    background: linear-gradient(135deg, #D0A900 0%, #B98600 100%); /* ホバー時のより暗いゴールドグラデーション */
    box-shadow: 0 5px 15px rgba(195, 144, 0, 0.3); /* 強調された影 */
    transform: translateY(-2px); /* わずかに持ち上げる */
  }
  
  .submit-button:active {
    transform: translateY(0); /* クリック時に元の位置に戻る */
  }
  
  /* ----------------------------------------
     汎用スタイルとヘルパー
     ユーティリティクラスと共通パターン
     ---------------------------------------- */
  .required h3::after {
    content: " *"; /* アスタリスクを追加 */
    color: var(--danger-color); /* 必須フィールド用の赤色 */
  }
  
  .optional-note {
    text-align: center; /* テキストを中央揃え */
    margin: var(--spacing-xl) 0; /* 垂直方向のマージン */
    color: var(--text-color); /* テキスト色 */
    font-size: 14px; /* 小さめのテキスト */
    background-color: var(--background-color); /* ベージュの背景 */
    padding: var(--spacing-sm) var(--spacing-md); /* 内側のパディング */
    border-radius: 0; /* 角丸なし */
    border-left: 3px solid var(--secondary-color); /* ゴールドの左境界線 */
  }
  
  .hidden {
    display: none; /* 要素を非表示 */
  }
  
  /* ----------------------------------------
     サンクスページと口コミリダイレクト
     完了と後続画面のスタイリング
     ---------------------------------------- */
  
  /* フィードバック画面のテキストエリア幅を調整 */
  #review-redirect .copy-container,
  #review-redirect #comment-to-copy {
    width: 100%;
    max-width: 100%;
    box-sizing: border-box;
  }
  
  /* ボタンコンテナの間隔調整 */
  #review-redirect .copy-container div {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: var(--spacing-md);
    margin-top: var(--spacing-md);
  }
  
  #thankyou h2, 
  #review-redirect h2 {
    font-family: var(--heading-font); /* 見出しフォント */
    margin-bottom: var(--spacing-md); /* 下部のマージン */
    font-size: 24px; /* テキストサイズ */
    color: var(--text-color); /* テキスト色 */
    letter-spacing: 1px; /* 文字間隔 */
  }
  
  #review-redirect p {
    margin-bottom: var(--spacing-md); /* 下部のマージン */
    color: var(--text-color); /* テキスト色 */
  }
  
  /* ----------------------------------------
     口コミコピーボタン
     レビューテキストをコピーするためのコントロール
     ---------------------------------------- */
  .copy-container {
    margin: var(--spacing-xl) 0; /* 垂直方向のマージン */
  }
  
  #comment-to-copy {
    width: 100%; /* 全幅 */
    height: 100px; /* 固定高さ */
    margin-bottom: var(--spacing-md); /* 下部のマージン */
    padding: var(--spacing-md); /* 内側のパディング */
    background-color: var(--background-color); /* ベージュの背景 */
    border-radius: 0; /* 角丸なし */
    border: 1px solid var(--border-color); /* 境界線 */
  }
  
  .action-button {
    border: 1px solid var(--border-color); /* 境界線 */
    padding: var(--spacing-md) var(--spacing-lg); /* 内側のパディング */
    font-size: 14px; /* テキストサイズ */
    font-weight: 500; /* 中程度の太さ */
    border-radius: 2px; /* わずかな角丸 */
    cursor: pointer; /* クリック可能 */
    transition: all 0.3s ease; /* スムーズな遷移 */
    box-shadow: var(--shadow-sm); /* 微妙な影 */
    margin: 0 var(--spacing-xs) var(--spacing-md); /* マージン */
    text-transform: uppercase; /* 大文字 */
    letter-spacing: 0.5px; /* 文字間隔 */
  }
  
  #copy-button {
    background-color: white; /* 白い背景 */
    color: var(--primary-color); /* ゴールドのテキスト */
    border: 1px solid var(--primary-color); /* ゴールドの境界線 */
  }
  
  #redirect-button {
    background: linear-gradient(135deg, #D0A900 0%, #C39000 100%); /* ゴールドのグラデーション */
    color: white; /* 白いテキスト */
    border: none; /* 境界線なし */
  }
  
  .action-button:hover {
    box-shadow: var(--shadow-md); /* ホバー時の強調された影 */
    transform: translateY(-2px); /* わずかに持ち上げる */
  }
  
  .copy-hint {
    color: #999;
    font-size: 12px;
    margin-top: 4px;
    margin-bottom: 12px;
    text-align: left;
  }
  
  /* ----------------------------------------
     バリデーションスタイル
     エラーとバリデーションメッセージのスタイリング
     ---------------------------------------- */
  .validation-message {
    display: none; /* デフォルトでは非表示 */
    margin-top: var(--spacing-md); /* 上部のマージン */
    padding: var(--spacing-sm) var(--spacing-md); /* 内側のパディング */
    font-size: 14px; /* テキストサイズ */
    border-left: 3px solid var(--accent-color); /* ゴールドの左境界線 */
    background-color: rgba(195, 144, 0, 0.05); /* 薄いゴールド背景 */
    color: var(--text-color); /* テキスト色 */
    opacity: 0; /* デフォルトでは透明 */
    transition: opacity 0.3s ease, transform 0.3s ease; /* スムーズな遷移 */
    transform: translateY(-10px); /* 初期位置 */
  }
  
  .validation-message.visible {
    display: block; /* 表示時に表示 */
    opacity: 1; /* 完全に不透明 */
    transform: translateY(0); /* 最終位置 */
    animation: fadeInMessage 0.5s ease forwards; /* フェードインアニメーション */
  }
  
  .question.error {
    border-left: 3px solid var(--accent-color); /* エラー状態のゴールド左境界線 */
  }
  
  .question.error h3 {
    color: var(--accent-color); /* エラー状態のゴールドテキスト */
  }
  
  /* ----------------------------------------
     アニメーション
     UIインタラクション用のカスタムアニメーション
     ---------------------------------------- */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); } /* 非表示で上から始まる */
    to { opacity: 1; transform: translateY(0); } /* 表示され位置に到達 */
  }
  
  @keyframes pulse {
    0% { transform: scale(1); } /* 通常サイズ */
    50% { transform: scale(1.1); } /* 拡大 */
    100% { transform: scale(1); } /* 通常サイズに戻る */
  }
  
  @keyframes fadeInMessage {
    0% { opacity: 0; transform: translateY(-10px); } /* 非表示で上から始まる */
    100% { opacity: 1; transform: translateY(0); } /* 表示され位置に到達 */
  }
  
  @keyframes gentleHighlight {
    0% { background-color: rgba(208, 169, 0, 0); } /* 透明から始まる */
    50% { background-color: rgba(208, 169, 0, 0.08); } /* ハイライト */
    100% { background-color: rgba(208, 169, 0, 0); } /* 透明に戻る */
  }
  
  .question.highlight {
    animation: gentleHighlight 1.5s ease; /* 穏やかなハイライトアニメーションを適用 */
  }
  
  /* ----------------------------------------
     外部警告の非表示
     埋め込みアプリケーションから不要なUI要素を非表示にする
     ---------------------------------------- */
  .apps-script-warning,
  div[role="alert"],
  .script-application-auth-container,
  .script-application-auth {
    display: none !important; /* 強制的に非表示 */
    visibility: hidden !important; /* 強制的に不可視 */
    height: 0 !important; /* ゼロ高さ */
    padding: 0 !important; /* パディングなし */
    margin: 0 !important; /* マージンなし */
  }
  
  /* ============================================
     レイアウト改善 - 高級感向上のためのスタイル
     QUARTERロゴとフィードバック画面を一体化し、
     より高級感のあるデザインに統一します
     ============================================ */
  
  /* ----------------------------------------
     コンテナの一体化
     ロゴとフィードバック画面を視覚的に統合します
     ---------------------------------------- */
  
  /* ロゴを含むヘッダー部分の調整 */
  header {
    margin-bottom: 0; /* ヘッダー下のマージンを削除 */
    border-bottom: none; /* 下線を削除 */
    padding-bottom: var(--spacing-md); /* 下部のパディングを縮小 */
  }
  
  /* ヘッダー下の区切り線のスタイル調整 */
  header + hr,
  header::after {
    content: "";
    display: block;
    width: 100%;
    max-width: 600px;
    height: 1px;
    background-color: var(--border-color);
    margin: 0 auto var(--spacing-md);
  }
  
  /* コンテナの背景と枠線設定 */
  .container {
    padding-top: 0; /* 上部のパディングを削除 */
  }
  
  /* 星表示の見出しを大きくして高級感アップ */
  #review-redirect h2, 
  #thankyou h2 {
    font-family: var(--heading-font);
    font-size: 28px;
    margin-bottom: var(--spacing-md);
    color: var(--text-color);
    letter-spacing: 1.5px;
  }
  
  /* コメントテキストエリアの高級感を向上 */
  #comment-to-copy {
    border: 1px solid var(--border-color);
    background-color: var(--background-color);
    padding: var(--spacing-md);
    font-family: var(--body-font);
    resize: none;
    height: 120px;
  }
  
  /* ボタンの高級感を向上 */
  .action-button {
    transition: all 0.3s ease;
  }
  
  #copy-button {
    border: 1px solid var(--primary-color);
    color: var(--primary-color);
    background-color: transparent;
  }
  
  #redirect-button {
    background: linear-gradient(135deg, #D0A900 0%, #C39000 100%);
    border: none;
    color: white;
    box-shadow: 0 2px 8px rgba(195, 144, 0, 0.2);
  }
  
  /* ボタンホバー時のエフェクト */
  .action-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  }
  
  /* モバイル向け調整 */
  @media (max-width: 768px) {
    #thankyou, 
    #review-redirect {
      width: 95%;
      padding: var(--spacing-lg) var(--spacing-md);
    }
    
    #review-redirect h2, 
    #thankyou h2 {
      font-size: 24px;
    }
  }
  
  /* ----------------------------------------
     ヘッダーとロゴのスタイル（追加）
     ---------------------------------------- */
     .site-header {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
      margin-bottom: var(--spacing-xl);
      padding-top: var(--spacing-lg);
      border-bottom: 1px solid var(--border-color);
      padding-bottom: var(--spacing-lg);
    }
    
    .logo-img {
      width: 160px;
      height: auto;
      display: block;
      margin: 0 auto var(--spacing-md);
      flex-shrink: 0;
    }
    
    /* 既存の lang-header クラスの代わりに site-header を使用するため、互換性のために維持 */
    .lang-header {
      display: flex;
      justify-content: flex-end;
      padding: var(--spacing-sm) var(--spacing-md);
    }
    
    /* 言語セレクタのスタイル調整 */
    #langSelector {
      padding: 4px 8px;
      border: 1px solid var(--border-color);
      border-radius: 0;
      background-color: white;
      font-size: 14px;
      cursor: pointer;
      margin-top: var(--spacing-sm);
    }
    /* ----------------------------------------
     ヘッダーと言語セレクタのスタイル（右上配置）
     ---------------------------------------- */
  .site-header-alt {
    position: relative;
    text-align: center;
    margin-bottom: var(--spacing-xl);
    padding-top: var(--spacing-lg);
    padding-bottom: var(--spacing-lg);
    border-bottom: 1px solid var(--border-color);
  }
  
  .logo-container {
    display: flex;
    justify-content: center;
  }
  
  .logo-img {
    width: 160px;
    height: auto;
    display: block;
    margin: 0 auto;
  }
  
  .language-selector-top-right {
    position: absolute;
    top: 16px;
    right: 16px;
    display: flex;
    align-items: center;
    font-size: 14px;
  }
  
  .lang-link {
    color: var(--text-color);
    text-decoration: none;
    padding: 4px 8px;
    transition: color 0.3s ease;
  }
  
  .lang-link:hover {
    color: var(--primary-color);
  }
  
  .lang-link.active {
    color: var(--primary-color);
    font-weight: 500;
  }
  
  .separator {
    color: var(--primary-color);
    margin: 0 2px;
  }
  
  /* 既存の lang-header クラスの互換性のために維持 */
  .lang-header {
    display: none;
  }
  
  /* ----------------------------------------
     メニュー項目の改善（追加セクション）
     ---------------------------------------- */
  
  /* 追加希望サービスのラベルの特別なスタイリング */
  #question14 .options label {
    font-size: 14px;
    line-height: 1.5;
    text-align: left;
  }
  
  /* モバイル向けのアコーディオン調整 */
  @media (max-width: 480px) {
    .collapsible-group .options label {
      padding: 8px 10px;
      font-size: 13px;
    }
    
    .collapsible-group summary {
      padding: 8px 10px;
      font-size: 14px;
    }
    
    .collapsible-group .options {
      padding: 8px 12px;
    }
  }
</file>

<file path="css/responsive.css">
/* ============================================
   QUARTERアンケートのレスポンシブスタイル
   異なる画面サイズやデバイスに合わせてレイアウトを調整するためのスタイル
   ============================================ */

/* ----------------------------------------
   フィードバック画面の基本レイアウト修正
   画面サイズに関わらず一貫した表示を提供
   ---------------------------------------- */

/* コンテナ全体の背景色を統一 */
body {
  background-color: var(--background-color); /* 淡いベージュ */
}

/* コンテナとフィードバックカードの親要素のスタイルを統一 */
.container {
  background-color: transparent; /* 背景を透明に */
}

/* フィードバックカードのコンテナを明示的に設定 */
#thankyou, #review-redirect {
  background-color: white;
  /* 他のスタイル */
}

/* 質問とフィードバックカードの共通コンテナ設定 */
.question, .feedback-card {
  /* 両方のコンテナに同じ背景色と余白設定を適用 */
  background-color: white;
  /* 質問カードと同じ左右5%マージン */
  margin-left: 5%;
  margin-right: 5%;
  /* その他の共通スタイル */
}

/* テキストエリアとボタン配置の調整 */
#review-redirect .copy-container {
  width: 100%;
  margin: var(--spacing-lg) 0;
}

#review-redirect #comment-to-copy {
  width: 100%;
  max-width: 100%;
  box-sizing: border-box;
  margin-bottom: var(--spacing-md);
}

/* ボタンコンテナのレイアウト調整 */
#review-redirect .copy-container div {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: var(--spacing-md);
}

/* ----------------------------------------
   ヘッダーと言語セレクタのスタイル調整
   全画面サイズでの言語セレクタとロゴの重なりを防止
   ---------------------------------------- */

/* デスクトップサイズでの基本設定 */
.site-header-alt {
  position: relative;
}

.language-selector-top-right {
  position: absolute;
  top: 16px;
  right: 16px;
  z-index: 10; /* 他の要素より前面に表示 */
}

/* ----------------------------------------
   モバイル端末（480px以下）
   スマートフォンなどの小さな画面向けの調整
   ---------------------------------------- */
@media (max-width: 480px) {
  /* 言語セレクタをロゴの上部中央に配置して重なりを防止 */
  .site-header-alt {
    padding-top: 50px; /* 上部にスペースを確保してロゴを下げる */
  }
  
  .language-selector-top-right {
    position: absolute;
    top: 10px;
    right: auto;
    left: 50%;
    transform: translateX(-50%); /* 中央揃え */
    width: 100%;
    justify-content: center;
  }
  
  .logo-container {
    margin-top: 5px; /* ロゴの上部マージンを調整 */
  }

  /* 非常に小さな画面ではロゴを少し小さくする */
  .text-logo {
    max-width: 160px;
  }

  .feedback-card {
    /* スマホでの余白調整 - 質問カードと同様に */
    margin-left: 5%;
    margin-right: 5%;
    padding: var(--spacing-md);
  }

  /* コンテナとレイアウト - 小さな画面に合わせて余白を縮小 */
  .container {
    padding: var(--spacing-sm); /* 余白を小さく調整（16pxから8pxへ） */
  }
  
  .question {
    padding: var(--spacing-md); /* 質問カードの内側余白を調整（24pxから16pxへ） */
  }
  
  /* テキストサイズ調整 - 小さな画面でも読みやすいサイズに */
  h3 {
    font-size: 15px; /* 見出しを少し小さく（16pxから15pxへ） */
  }
  
  .options label {
    font-size: 14px; /* 選択肢のテキストを小さく（15pxから14pxへ） */
  }
  
  /* 選択肢の間隔を広げる */
  .options label {
    font-size: 14px;
    /* 選択肢間の下マージンを増やす（8pxから16pxへ） */
    margin-bottom: var(--spacing-md);
    /* ラベル内の余白も少し大きく */
    padding: var(--spacing-md) var(--spacing-md);
    /* タップしやすくするために最小高さを設定 */
    min-height: 48px;
    /* フレックスボックスでコンテンツを縦方向に中央揃え */
    display: flex;
    align-items: center;
  }
  
  /* ボタン調整 - モバイル画面でタップしやすく */
  .submit-button,
  .action-button {
    width: 80%; /* ボタンの幅を広げて（もともと自動）タップしやすく */
    margin-bottom: var(--spacing-md); /* ボタン間の余白を確保 */
  }
  
  /* 星評価 - 小さな画面でも操作しやすいサイズに */
  .star {
    font-size: 36px; /* 星のサイズを小さく（42pxから36pxへ） */
    padding: 0 var(--spacing-xs); /* 左右の余白を縮小（8pxから4pxへ） */
  }
  
  /* ナビゲーション - 小さな画面でもすっきり見えるように調整 */
  .nav-text {
    font-size: 12px; /* ナビゲーションのテキストを小さく（14pxから12pxへ） */
  }
  
  .nav-item {
    padding: 8px 0; /* 上下のパディングを小さく（15pxから8pxへ） */
  }
  
  /* テキストエリア - 入力欄のサイズ調整 */
  textarea {
    font-size: 14px; /* フォントサイズを小さく（15pxから14pxへ） */
  }
  
  /* メッセージコンテナ - 完了画面などのコンテナ調整 */
  #thankyou, 
  #review-redirect {
    width: 95%; /* モバイルでは幅を広げる */
    padding: var(--spacing-md); /* 内側の余白を小さく調整 */
    margin-top: var(--spacing-md); /* 上部マージンも調整 */
  }
  
  #thankyou h2, 
  #review-redirect h2 {
    font-size: 20px; /* 見出しを小さく（24pxから20pxへ） */
  }
  
  /* コピーボタンとリダイレクトボタンを縦に配置 */
  #review-redirect .copy-container div {
    flex-direction: column;
    align-items: center;
  }
  
  #review-redirect .action-button {
    width: 100%;
    max-width: 300px;
    margin: var(--spacing-xs) 0;
  }
  
  /* ============================
     スマホ幅を少し広げる調整
     ----------------------------
     変更前 : 左右 5% マージン ＋ 幅 90%（実質 100% だが padding が狭く見える）
     ============================ */
  
  /* 質問カード・フィードバックカード共通 */
  .question,
  #thankyou,
  #review-redirect,
  .feedback-card {      /* ← layout‑fix.css で使われるクラスも念のため含める */
    width: 96% !important;     /* 90% → 94% に拡大 */
    margin-inline: auto; 

  }

  /* 内側コンテナ（全体ラッパー）も少し余裕を持たせる */
  .container {
    padding-left: var(--spacing-md);   /* 16px 程度 */
    padding-right: var(--spacing-md);
  }

  /* オプションラベルの幅が足りない場合は 100% に */
  .options label {
    width: 100%;
  }
}

/* ----------------------------------------
   タブレット端末（481px〜768px）
   中間サイズのデバイス向けの微調整
   ---------------------------------------- */
@media (min-width: 481px) and (max-width: 768px) {
  /* タブレットでも言語セレクタの位置調整 */
  .site-header-alt {
    padding-top: 55px; /* 上部にスペースを確保してロゴを下げる */
  }
  
  .language-selector-top-right {
    position: absolute;
    top: 12px;
    right: auto;
    left: 50%;
    transform: translateX(-50%); /* 中央揃え */
    width: 100%;
    justify-content: center;
  }
  
  .logo-container {
    margin-top: 8px; /* ロゴの上部マージンを調整 */
  }

  /* タブレットサイズ向けの控えめな調整 - モバイルほど極端にしない */
  .container {
    padding: var(--spacing-md); /* コンテナの余白をやや小さく調整 */
  }
  
  .nav-item {
    padding: 10px 0; /* ナビアイテムの上下パディングを少し小さく（15pxから10pxへ） */
  }
  
  .star {
    font-size: 38px; /* 星のサイズを少し小さく（42pxから38pxへ） */
  }
  
  /* タブレットでも選択肢の間隔を少し広げる */
  .options label {
    margin-bottom: 12px; /* 8pxから12pxへ */
    min-height: 44px; /* タッチしやすい最小高さ */
  }
  
  /* フィードバック画面の調整 */
  #thankyou, 
  #review-redirect {
    width: 92%; /* 幅をやや広げる */
    padding: var(--spacing-md) var(--spacing-lg);
  }
}

/* ----------------------------------------
   タッチデバイス対応
   タッチ操作に最適化した調整（画面サイズに関係なく適用）
   ---------------------------------------- */
@media (hover: none) {
  /* 
   * hover: none は、タッチスクリーンなどのホバー機能がないデバイスを対象にします
   * これはスマートフォンやタブレットなどで、マウスのようなホバーができない場合に適用されます
   */
  
  /* タッチデバイスでのホバー効果無効化 - タップ操作に最適化 */
  .options label:hover {
    transform: none; /* ホバー時の移動効果を無効化（右に3px移動する効果を消去） */
    background-color: white; /* ホバー時の背景色変更を無効化 */
    box-shadow: none; /* ホバー時の影効果を無効化 */
  }
  
  /* タッチフィードバックの強化 - タップ時の視覚的フィードバックを提供 */
  .options label:active {
    background-color: var(--background-color); /* タップ時に背景色を変更してフィードバック */
    transform: translateX(3px); /* タップ時に右へ移動させて反応を示す */
  }
  
  /* ボタンのタップフィードバック - タップされたことがわかりやすく */
  .submit-button:active,
  .action-button:active {
    transform: scale(0.98); /* タップ時にわずかに縮小して押された感を出す */
    opacity: 0.9; /* わずかに透明度を上げて押された感を強調 */
  }
  
  /* 星評価のタップエリア拡大 - 指でタップしやすくする */
  .star {
    padding: 0 var(--spacing-md); /* 左右のパディングを大きく（4/8pxから16pxへ）してタップ領域を拡大 */
  }
  
  /* タッチデバイスでのフィードバックボタン調整 */
  #review-redirect .action-button {
    padding: var(--spacing-md) var(--spacing-lg);
    min-height: 48px; /* タップしやすい最小高さ */
  }
}
</file>

</files>
