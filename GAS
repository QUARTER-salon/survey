{
  "timeZone": "Asia/Tokyo",
  "dependencies": {},
  "exceptionLogging": "STACKDRIVER",
  "runtimeVersion": "V8",
  "oauthScopes": [
    "https://www.googleapis.com/auth/script.scriptapp",
    "https://www.googleapis.com/auth/spreadsheets.currentonly",
    "https://www.googleapis.com/auth/spreadsheets"
  ],
  "webapp": {
    "executeAs": "USER_DEPLOYING",
    "access": "ANYONE_ANONYMOUS"
  }
}


コード.gs 
/**
 * ────────────────────────────────
 *  共通ユーティリティ
 * ────────────────────────────────
 */
// 以下の定数は、doOptionsでの応答内容のドキュメント化や、
// 将来的に別の方法でヘッダー制御が必要になった場合のために残しておいても良いですが、
// 現在の TextOutput の使い方では直接使用されません。
// const ALLOWED_ORIGIN = 'https://quarter-salon.github.io';
// const ALLOWED_METHODS = 'GET,POST,OPTIONS';
// const ALLOWED_HEADERS = 'Content-Type';

/**
 * レスポンスボディとMIMEタイプを指定してTextOutputを生成
 * @param {string} body - レスポンスボディ
 * @param {string} mime - ContentService.MimeType
 * @return {TextOutput}
 */
function createResponse_(body, mime) {
  // TextOutputオブジェクトを生成し、MIMEタイプを設定して返すだけ
  // ヘッダー設定はGoogle Apps Scriptプラットフォームに委ねる
  return ContentService.createTextOutput(body).setMimeType(mime);
}

/**
 * JSON 便利ラッパー
 * @param {object} obj
 */
function jsonResponse_(obj) {
  return createResponse_(JSON.stringify(obj), ContentService.MimeType.JSON);
}

/* ──────────────── 疎通確認用 GET ──────────────── */
function doGet(e) {
  if (typeof e === 'undefined') {
    console.log('doGet: direct execution');
    // 直叩きの場合は、分かりやすいテキストメッセージを返すなど
    return ContentService.createTextOutput('doGet: Direct execution test.').setMimeType(ContentService.MimeType.TEXT);
  }
  return jsonResponse_({ status: 'ok', time: new Date().toISOString() });
}

/* ──────────────── メイン POST ──────────────── */
function doPost(e) {
  const isDirect = !e || !e.postData || !e.postData.contents;
  let dataObj;

  try {
    if (isDirect) {
      console.log('doPost: direct execution');
      dataObj = { source: 'DirectExecution', ts: new Date().toISOString(), message: 'This is dummy data for direct doPost execution.' };
    } else {
      const raw = e.postData.contents;
      const cType = (e.postData.type || '').toLowerCase();

      if (cType.indexOf('application/json') !== -1 || cType === 'text/plain' || cType === '') { // cTypeが空の場合もJSONとしてパース試行
        dataObj = JSON.parse(raw);
      } else if (cType.indexOf('application/x-www-form-urlencoded') !== -1) {
        dataObj = e.parameter;
      } else {
        console.warn('Unsupported Content-Type for automatic parsing:', cType, 'Falling back to JSON parse attempt.');
        dataObj = JSON.parse(raw);
      }
    }
  } catch (err) {
    console.error('Data parse error:', err, 'Raw data:', (e && e.postData && e.postData.contents) ? e.postData.contents : 'N/A');
    if (isDirect) {
      console.error('Error during direct execution data handling.');
      return createResponse_('Error during direct execution: ' + err.message, ContentService.MimeType.TEXT);
    }
    return jsonResponse_({ success: false, error: 'Invalid request data or format' });
  }

  let lock; // LockServiceのために変数を宣言

  /* -------- Sheets 保存 -------- */
  try {
    lock = LockService.getScriptLock(); // ロックを取得
    lock.waitLock(30000); // 最大30秒待機

    const props = PropertiesService.getScriptProperties();
    const ssId = props.getProperty('SPREADSHEET_ID');
    const sheetName = props.getProperty('SHEET_NAME') || '回答一覧';

    if (!ssId) throw new Error('SPREADSHEET_ID not set in script properties');

    const ss = SpreadsheetApp.openById(ssId); // ★★★ このssがマスターSSのはず
    if (!ss) throw new Error(`Spreadsheet with ID "${ssId}" not found or not accessible.`);
    const sheet = ss.getSheetByName(sheetName);
    if (!sheet) throw new Error(`Sheet "${sheetName}" not found in spreadsheet "${ss.getName()}"`);

    const rowData = [
      new Date(),
      dataObj.store || '',
      dataObj.rating || '',
      dataObj.name || '',
      dataObj.visitType || '',
      dataObj.gender || '',
      dataObj.age || '',
      Array.isArray(dataObj.services) ? dataObj.services.join(', ') : (dataObj.services || ''),
      dataObj.serviceSatisfaction || '',
      dataObj.staffResponse || '',
      dataObj.waitTime || '',
      dataObj.cleanliness || '',
      dataObj.improvement || '',
      dataObj.otherComments || '',
      Array.isArray(dataObj.wishServices) ? dataObj.wishServices.join(', ') : (dataObj.wishServices || ''),
    ];

    sheet.appendRow(rowData);
    console.log('Data successfully written to sheet (structured):', JSON.stringify(rowData));

    // ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
    // ★ WEBアプリからの書き込み後、データ振り分け関数を直接呼び出す ★
    // ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
    // isDirect でない場合（＝WEBアプリからの実際のPOSTリクエストの場合）にのみ実行
    if (!isDirect) {
      console.log('WEBアプリ処理の最後に distributeAnswersToStoreFiles() を呼び出します。');
      // distributeAnswersToStoreFiles は SpreadsheetApp.getActiveSpreadsheet() を使う想定なので、
      // このdoPostがマスターSSのGASプロジェクトで実行されていれば問題ない。
      // もし、このdoPostが別のGASプロジェクトにある場合は、distributeAnswersToStoreFiles に
      // マスターSSのIDを渡すなどの工夫が必要。今回は同じプロジェクト内と仮定。
      distributeAnswersToStoreFiles();
    }

  } catch (err) {
    console.error('Sheet write or distribution error:', err); // エラーメッセージを統合
    if (isDirect) {
      console.error('Error during direct execution (sheet/distribution).');
      return createResponse_('Error during direct execution (sheet/distribution): ' + err.message, ContentService.MimeType.TEXT);
    }
    return jsonResponse_({ success: false, error: 'Sheet write or distribution error: ' + err.message });
  } finally {
    if (lock) {
      lock.releaseLock(); // 必ずロックを解放
    }
  }
  /* -------------------------------- */

  if (isDirect) {
    console.log('doPost (direct execution) completed successfully.');
    return createResponse_('POST (direct execution) OK. Check logs for details.', ContentService.MimeType.TEXT);
  }
  return jsonResponse_({ success: true, received_data: dataObj });
}

// ユーティリティ関数（もし未定義なら追加）
function jsonResponse_(data) {
  return ContentService.createTextOutput(JSON.stringify(data))
    .setMimeType(ContentService.MimeType.JSON);
}

function createResponse_(text, mimeType) {
  return ContentService.createTextOutput(text).setMimeType(mimeType);
}

/* ──────────────── プリフライト OPTIONS ──────────────── */
function doOptions(e) { // 引数 e を受け取るようにする (必須ではないが、他の関数と合わせる)
  if (typeof e === 'undefined') { // エディタからの直叩き判定も追加（任意）
    console.log('doOptions: direct execution');
    return ContentService.createTextOutput('doOptions: Direct execution test.').setMimeType(ContentService.MimeType.TEXT);
  }
  // 通常のOPTIONSリクエストの場合
  // 空のTextOutputを返すことで、Apps Scriptに適切なCORSヘッダー処理を委ねる
  // Access-Control-Allow-Origin などは、ここで明示的に設定するのではなく、
  // クライアントからのリクエストの Origin ヘッダーに基づいて、
  // Apps Script プラットフォームが自動的に付与してくれることが期待される。
  // もし特定のオリジンのみ許可したい場合は、スクリプトのデプロイ設定や、
  // より高度な構成（API Gatewayなど）が必要になることがあります。
  console.log('doOptions called for preflight request.');
  return ContentService.createTextOutput().setMimeType(ContentService.MimeType.TEXT);
}

ファイル集計.gs 
/**
 * @OnlyCurrentDoc
 * このスクリプトは現在のスプレッドシート内でのみ動作します。
 */

// 店舗名と、対応する店舗別スプレッドシートのファイルIDをマッピング
// 各店舗のスプレッドシートIDを事前に調べて、ここに設定してください。
const STORE_SHEET_IDS = {
  "QUARTER": "1BCaA4-s6-ZV-WYrBDCNRMyRCQQrTuMpNMo0Cnp2t55A",
  "QUARTER RESORT": "1LAUi0zQ6r_iNtCkAVqr-ZNC7ac1CAeFWSflXOQzQAxk",
  "QUARTER SEASONS": "1TwAm1s2NUmCmxWXyeVl4cqCvFT7fKPHYQNoXDlYOpjg",
  "LINK": "10Obske7mV2wshEqFMSOM2QcoQZ8fzMWuDO1W5namEno",
  "iL": "1GzIEQB9BYBv4NL-yv0tPmR4LKl2WaT4BCfVigy5_sVg"
  // 必要に応じて他の店舗も追加
};

/**
 * 回答一覧シートのデータを、店舗ごとにそれぞれの専用スプレッドシートファイルに仕分けします。
 */
function distributeAnswersToStoreFiles() {
  const masterSs = SpreadsheetApp.getActiveSpreadsheet();
  const sourceSheetName = "回答一覧"; // データソースとなるシート名
  const sourceSheet = masterSs.getSheetByName(sourceSheetName);

  if (!sourceSheet) {
    SpreadsheetApp.getUi().alert(`エラー: マスターシート "${sourceSheetName}" が見つかりません。処理を中止します。`);
    Logger.log(`エラー: マスターシート "${sourceSheetName}" が見つかりません。`);
    return;
  }

  const allData = sourceSheet.getDataRange().getValues();

  if (allData.length <= 1) {
    Logger.log("仕分け対象のデータがありません（ヘッダーのみ、または空です）。");
    return;
  }

  const headerRow = allData[0];
  const dataRows = allData.slice(1);
  const storeColumnIndex = 1; // 店舗名が記載されている列のインデックス (B列)

  // 各店舗の処理
  for (const storeName in STORE_SHEET_IDS) {
    if (STORE_SHEET_IDS.hasOwnProperty(storeName)) {
      const targetFileId = STORE_SHEET_IDS[storeName];
      if (!targetFileId || targetFileId.startsWith("【") || targetFileId.endsWith("】")) {
        Logger.log(`店舗 "${storeName}" のスプレッドシートIDが設定されていません。スキップします。`);
        continue;
      }

      try {
        const targetSs = SpreadsheetApp.openById(targetFileId);
        // 各店舗ファイル内の書き込み先シート名を指定 (例: "回答データ", "Sheet1"など)
        // ここでは、各店舗ファイルに最初に存在するシート (通常 "Sheet1") に書き込む想定
        let targetSheet = targetSs.getSheets()[0];
        if (!targetSheet) { // もしシートが存在しない稀なケース
            targetSheet = targetSs.insertSheet("回答データ"); // 新しいシートを作成
            Logger.log(`店舗 "${storeName}" のファイルに "回答データ" シートを新規作成しました。`);
        } else {
            // 店舗別シートの既存のシート名をログに出力（デバッグ用）
            Logger.log(`店舗 "${storeName}" の書き込み先シート: "${targetSheet.getName()}"`);
        }


        // ターゲットシートのヘッダーを確認・設定
        // 1行目にヘッダーがなければ書き込む
        if (targetSheet.getLastRow() < 1 || targetSheet.getRange(1, 1, 1, headerRow.length).getValues()[0].join("") !== headerRow.join("")) {
          targetSheet.getRange(1, 1, 1, headerRow.length).setValues([headerRow]);
          Logger.log(`店舗 "${storeName}" のシート "${targetSheet.getName()}" にヘッダーを書き込みました。`);
        }

        // 既存データをクリア (ヘッダー行を除く)
        if (targetSheet.getLastRow() > 1) {
          targetSheet.getRange(2, 1, targetSheet.getLastRow() - 1, headerRow.length).clearContent();
        }

        // 「回答一覧」シートから該当店舗のデータ行をフィルタリング
        const filteredData = dataRows.filter(row => {
          return row[storeColumnIndex] && row[storeColumnIndex].toString().trim() === storeName;
        });

        if (filteredData.length > 0) {
          targetSheet.getRange(2, 1, filteredData.length, headerRow.length).setValues(filteredData);
          Logger.log(`店舗 "${storeName}" のファイルに ${filteredData.length} 件のデータを書き込みました。`);
        } else {
          Logger.log(`店舗 "${storeName}" に該当するデータはありませんでした。`);
        }
      } catch (e) {
        Logger.log(`店舗 "${storeName}" (ID: ${targetFileId}) の処理中にエラーが発生しました: ${e.toString()}`);
        // 必要に応じてUIでエラー通知
        // SpreadsheetApp.getUi().alert(`店舗 "${storeName}" の処理中にエラーが発生しました。詳細はログを確認してください。`);
      }
    }
  }

  SpreadsheetApp.flush();
  Logger.log("すべての店舗ファイルへの仕分け処理が完了しました。");
  // SpreadsheetApp.getUi().alert("各店舗ファイルへの仕分けが完了しました。");
}

/**
 * フォーム送信時など、「回答一覧」シートが編集されたときに自動的に実行されるトリガー関数。
 */
function onMasterSheetEdit(e) {
  const masterSs = SpreadsheetApp.getActiveSpreadsheet();
  const sourceSheetName = "回答一覧";

  // イベントオブジェクト e が存在し、編集されたシートが "回答一覧" であるかを確認
  if (e && e.range.getSheet().getName() === sourceSheetName) {
    Logger.log(`onMasterSheetEdit トリガーが発動しました。編集範囲: ${e.range.getA1Notation()}, 編集されたシート: ${e.range.getSheet().getName()}`);
    distributeAnswersToStoreFiles();
  } else if (!e) {
    // 手動実行や時間主導型トリガーから直接呼び出された場合 (e オブジェクトがない)
    Logger.log("onMasterSheetEdit がイベントオブジェクトなしで呼び出されました。全件処理を実行します。");
    distributeAnswersToStoreFiles();
  } else {
    Logger.log(`onMasterSheetEdit トリガーが発動しましたが、編集されたシート (${e.range.getSheet().getName()}) が対象の "${sourceSheetName}" ではないため、処理をスキップします。`);
  }
}